<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晚晴铭悦轩</title>
  <subtitle>听食茗赏，山土月日</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://www.huzerui.com/"/>
  <updated>2017-07-09T06:08:26.866Z</updated>
  <id>http://www.huzerui.com/</id>
  
  <author>
    <name>前端空城师</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于Blob、FileReader、FormData的那些事</title>
    <link href="http://www.huzerui.com/2017/07/05/about-blob-filereader-formdata/"/>
    <id>http://www.huzerui.com/2017/07/05/about-blob-filereader-formdata/</id>
    <published>2017-07-05T07:12:19.000Z</published>
    <updated>2017-07-09T06:08:26.866Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Blob对象是什么"><a href="#Blob对象是什么" class="headerlink" title="Blob对象是什么"></a>Blob对象是什么</h1><p>从<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="external">MDN</a>上有这样一段描述：</p>
<blockquote>
<p>一个 Blob对象表示一个不可变的, 原始数据的<strong>类似文件对象</strong>。Blob表示的数据不一定是一个JavaScript原生格式。 File 接口基于Blob，继承 blob功能并将其扩展为支持用户系统上的文件。</p>
</blockquote>
<p>引用中的关键词是保存着原始数据的类似文件的对象，所谓类似文件的对象可以理解为这种对象本身不是文件，但可以从原始数据解析出文件数据。</p>
<p>既然要解析，就需要知道Blob对象的类型，所以创建Blob的时候第二个参数就是配置项，我们可以配置所有<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="external">MIME类型</a>，比如将配置项的type制定为’text/xml’，’text/plain’，’text/css’等，Blob构造函数语法如下（参考MDN）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aBlob = <span class="keyword">new</span> Blob( array, options );</div></pre></td></tr></table></figure></p>
<ul>
<li>array 是一个由ArrayBuffer, ArrayBufferView, Blob, DOMString 等对象构成的 Array ，或者其他类似对象的混合体，它将会被放进 Blob.</li>
<li>options 是一个可选的Blob熟悉字典，它可能会指定如下两种属性：<ul>
<li>type，默认值为 “”，它代表了将会被放入到blob中的数组内容的MIME类型。</li>
<li>endings，默认值为”transparent”，它代表包含行结束符\n的字符串如何被输出。 它是以下两个值中的一个： “native”，代表行结束符会被更改为适合宿主操作系统文件系统的惯例，或者 “transparent”, 代表会保持blob中保存的结束符不变 </li>
</ul>
</li>
</ul>
<p>Blob创建出来，那JS种如何读取或者说从原始数据解析出文件数据呢？从Blob中读取内容的唯一方法是使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader" target="_blank" rel="external">FileReader</a>。</p>
<h1 id="FileReader对象"><a href="#FileReader对象" class="headerlink" title="FileReader对象"></a>FileReader对象</h1><p>故名思议，FileReader对象用于读取文件数据，所谓的文件数据其实就是Blob对象和File对象（因为File对象继承于Blob对象）。<br>由于文件的读取时间基于文件的大小，所以FileReader读取的过程为设计为异步，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fileReader = <span class="keyword">new</span> FileReader();</div><div class="line">FileReader.addEventListener(<span class="string">'onload'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">	<span class="comment">// 读取的数据保存在fileReader实例的result属性</span></div><div class="line">	<span class="keyword">var</span> data = e.target.result</div><div class="line">	<span class="comment">// Todo...</span></div><div class="line">&#125;)</div><div class="line">fileReader.readAsDataURL(file)</div></pre></td></tr></table></figure></p>
<p>这个过程跟预加载图片的过程相同，<strong>生成实例-&gt;监听-&gt;开始加载</strong>，上面的例子以读取文件为例，使用readAsDataURL的方法，FileRader还有三种读取为其他数据类型的方法：<br>方法名 | 参数| 描述 |<br>—- | — | — |<br>readAsBinaryString| file |将文件读取为二进制编码<br>readAsBinaryArray | file | 将文件读取为二进制数组<br>readAsText|  file[, encoding] |  按照格式将文件读取为文本，encode默认为UTF-8<br>readAsDataURL | file| 将文件读取为DataUrl</p>
<p>另外还有一个abort方法用于阻止文件读取</p>
<p>我们知道Image对象读取图像的事件有onload、onerror、onabort，而FileReader除了这三个事件，还新增了三个对过程的监听事件，onloadstart、onprogress、onloadend，但实际上新增的事件使用的并不多，主要用于大文件读取时进度条实现的需求上。    </p>
<p>在onprogress的事件处理器中，有一个ProgressEvent对象，这个事件对象实际上继承了Event对象，提供了三个只读属性：</p>
<ul>
<li>lengthComputable</li>
<li>loaded  （已读取的字节数）  </li>
<li><ul>
<li>total   （总字节数）  </li>
</ul>
</li>
</ul>
<p>其中事件的lengthComputable属性代表文件总大小是否可知。如果 lengthComputable 属性的值是 false，那么意味着总字节数是未知并且 total 的值为零。</p>
<p>看到这些是否感觉似曾相识，“蓦然回首，那人却在灯火阑珊处”。没错，使用ajax上传文件的时候也有同样的事件钩子，<a href="https://en.wikipedia.org/wiki/XMLHttpRequest" target="_blank" rel="external">XMLHttpRequest Level 2</a>中，xhr的progress事件用于异步请求进度的监听，上传的进度事件绑定在xhr的upload属性中，在异步上传文件时我们可以这样监听进度：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xhr.upload.onprogress = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (e.lengthComputable) &#123;</div><div class="line">        <span class="keyword">var</span> percentComplete = (e.loaded / e.total) * <span class="number">100</span>;</div><div class="line">        $progress.css(<span class="string">'width'</span>, percentComplete + <span class="string">'%'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>同样地，我们只需要为onprogress事件添加处理器就获取文件读取的进度。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">progressHandler</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> percentLoaded = <span class="built_in">Math</span>.round((e.loaded / e.total) * <span class="number">100</span>);</div><div class="line">    $progress.css(<span class="string">'width'</span>, percentLoaded + <span class="string">'%'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>FileReader和文件密不可分，既然说到文件上传，就再说一下多文件上传、拖拽上传</p>
<h1 id="FormData与文件上传"><a href="#FormData与文件上传" class="headerlink" title="FormData与文件上传"></a>FormData与文件上传</h1><h2 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fileInput = <span class="built_in">document</span>.getElementById(<span class="string">"myFile"</span>);</div><div class="line"><span class="keyword">var</span> files = fileInput.files;</div><div class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> file = files[i];</div><div class="line">    formData.append(<span class="string">'files[]'</span>, file, file.name);</div><div class="line">    xhr.open(<span class="string">"POST"</span>, <span class="string">"/upload.php"</span>);</div><div class="line"></div><div class="line">	xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	    <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="number">200</span>)&#123;</div><div class="line">	        <span class="comment">//对请求成功的处理</span></div><div class="line">	    &#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 如果要监听进度</span></div><div class="line">	xhr.upload.onprogress = progressHandler</div><div class="line">	</div><div class="line">	xhr.send(formData);</div><div class="line">	xhr = <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是将所有的文件发送一次异步请求，而我们监听的进度也是所有文件上传的总进度，如果我们需要单独监听单个文件的上传进度，只需改成递归的方式依次发送请求。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fileInput = <span class="built_in">document</span>.getElementById(<span class="string">"myFile"</span>);</div><div class="line"><span class="keyword">var</span> files = fileInput.files;</div><div class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> uploadFile = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</div><div class="line">	formData.append(files[i]);</div><div class="line"></div><div class="line">	xhr.open(<span class="string">"POST"</span>, <span class="string">"/upload.php"</span>);</div><div class="line"></div><div class="line">	xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	    <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="number">200</span>)&#123;</div><div class="line">			<span class="comment">//进行下一次请求</span></div><div class="line">	        i++;</div><div class="line">	        <span class="keyword">if</span>(i != files.length)&#123;</div><div class="line">			    uploadFile()</div><div class="line">			&#125;  </div><div class="line">	    &#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 如果要监听进度</span></div><div class="line">	xhr.upload.onprogress = progressHandler</div><div class="line">	</div><div class="line">	xhr.send(formData);</div><div class="line">	xhr = <span class="literal">null</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="拖拽上传"><a href="#拖拽上传" class="headerlink" title="拖拽上传"></a>拖拽上传</h2><p>拖拽上传只需了解HTML5基本的拖拽事件即可，参考MDN的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API" target="_blank" rel="external">HTML 拖放 API</a>。</p>
<ul>
<li>drag : 元素被拖拽时由<strong>拖拽元素</strong>频繁触发的事件</li>
<li>dragstart : 拖拽时开始时由<strong>拖拽元素</strong>触发的事件</li>
<li>dragend : 拖拽结束时触发由<strong>拖拽元素</strong>的事件</li>
<li>dragover : 当拖拽元素进入放置区域时由<strong>放置元素</strong>频繁触发的事件(每隔几百毫秒就会触发一次)</li>
<li>dragenter : 当拖拽元素进入放置区域时由<strong>放置元素</strong>触发的事件</li>
<li>dragleave : 当拖拽元素离开放置区域时由<strong>放置元素</strong>触发的事件</li>
<li>drop : 当拖拽元素在放置区域放置时由<strong>放置元素</strong>触发的事件</li>
</ul>
<p><strong>持续触发的事件</strong>：drag和dragover<br><strong>发生在拖拽元素的事件</strong>：drag、dragstart、dragend<br><strong>发生在放置元素的事件</strong>：dragover 、dragenter 、dragleave、drop<br><strong>事件触发次序：</strong>dragstart -&gt; drag -&gt; dragenter -&gt; dragover -&gt; dragleave -&gt; drop -&gt; dragend</p>
<p>当我们拖放文件到浏览器中时，浏览器默认的行为是浏览器将当前页面重定向到被拖拽元素所指向的资源上，因此需要阻止dragenter、dragover、drop的默认行为，这样才能使drop事件被触发。（最好同时阻止冒泡）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dropArea;</div><div class="line"></div><div class="line">dropArea = <span class="built_in">document</span>.getElementById(<span class="string">"dropArea"</span>);</div><div class="line">dropArea.addEventListener(<span class="string">"dragenter"</span>, handleDragenter, <span class="literal">false</span>);</div><div class="line">dropArea.addEventListener(<span class="string">"dragover"</span>, handleDragover, <span class="literal">false</span>);</div><div class="line">dropArea.addEventListener(<span class="string">"drop"</span>, handleDrop, <span class="literal">false</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDragenter</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">	<span class="comment">/*若要兼容ie</span></div><div class="line">	window.event? window.event.cancelBubble = true : e.stopPropagation();</div><div class="line">	window.event? window.event.returnValue = false : e.preventDefault();*/</div><div class="line">    e.stopPropagation();</div><div class="line">    e.preventDefault();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDragover</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    e.stopPropagation();</div><div class="line">    e.preventDefault();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDrop</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    e.stopPropagation();</div><div class="line">    e.preventDefault();</div><div class="line"></div><div class="line">    <span class="keyword">var</span> dt = e.dataTransfer;</div><div class="line">    <span class="keyword">var</span> files = dt.files;</div><div class="line"></div><div class="line">    <span class="comment">// FileReader将图片读取为dataUrl并立刻展示..省略</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>值得注意的是：触发dragstart事件后，其他元素的mousemove,mouseover,mouseenter,mouseleave,mouseout事件均不会被触发了。</p>
<p>上面拖拽回调中的事件对象，继承自 MouseEvent 对象，它的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer" target="_blank" rel="external">dataTransfer</a>属性保存着拖拽对象的相关信息。</p>
<p>DataTransfer对象有几个重要的属性，其中files属性保存文件的数据。<br>effectAllowed 和 dropEffect 最主要的作用是，用于配置拖拽操作过程中鼠标指针的类型以便提示用户后续可执行怎样的操作；其次的作用是，控制 drop 事件的触发与否。当显示禁止的指针样式时，将无法触发目标元素的 drop 事件。</p>
<p>注意：只能在dragstart中设置effectAllowed，只能在dragover中设置dropEffect </p>
<p>拖拽后通过FileReader读取立刻显示图片优化体验，因为用户可能需要确定是否更换图片，然后单击按钮才将图片，这样可以防止不必要的请求，接下来就是上文提到的FormData上传文件，这里不再赘述。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Blob对象是什么&quot;&gt;&lt;a href=&quot;#Blob对象是什么&quot; class=&quot;headerlink&quot; title=&quot;Blob对象是什么&quot;&gt;&lt;/a&gt;Blob对象是什么&lt;/h1&gt;&lt;p&gt;从&lt;a href=&quot;https://developer.mozilla.org/zh
    
    </summary>
    
      <category term="前端" scheme="http://www.huzerui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Blob" scheme="http://www.huzerui.com/tags/Blob/"/>
    
      <category term="FileReader" scheme="http://www.huzerui.com/tags/FileReader/"/>
    
      <category term="FormData" scheme="http://www.huzerui.com/tags/FormData/"/>
    
  </entry>
  
  <entry>
    <title>vuejs开发H5页面总结</title>
    <link href="http://www.huzerui.com/2017/07/03/vuejs-develop-h5-experience/"/>
    <id>http://www.huzerui.com/2017/07/03/vuejs-develop-h5-experience/</id>
    <published>2017-07-03T07:12:19.000Z</published>
    <updated>2017-07-03T09:27:33.325Z</updated>
    
    <content type="html"><![CDATA[<p>最近参与了APP内嵌H5页面的开发，这次使用vuejs替代了jQuery，仅仅把vuejs当做一个库来使用，效率提高之外代码可读性更强，在此分享一下自己的一些开发中总结的经验。</p>
<h1 id="关于布局方案"><a href="#关于布局方案" class="headerlink" title="关于布局方案"></a>关于布局方案</h1><p>当拿到设计师给的UI设计图，前端的首要任务就是布局和样式，相信这对于大部分前端工程师来说已经不是什么难题了。移动端的布局相对PC较为简单，关键在于<strong>对不同设备的适配</strong>。之前介绍了一篇关于移动端<a href="http://www.huzerui.com/blog/2016/06/16/mobile-rem/">rem布局方案</a>，这大致是网易H5的适配方案。不过实践中发现淘宝开源的<a href="https://github.com/amfe/lib-flexible" target="_blank" rel="external">可伸缩布局方案</a>效果更好且更容易使用。</p>
<p>网易云的方案总结为：根据<strong>屏幕大小 / 750 = 所求字体 / 基准字体大小</strong>比值相等，动态调节html的font-size大小。</p>
<p>淘宝的方案总结为：根据设备设备像素比设置scale的值，保持视口device-width始终等于设备物理像素，接着根据屏幕大小动态计算根字体大小，具体是将屏幕划分为10等分，每份为a，1rem就等于10a。</p>
<p>通常我们会拿到750宽的设计稿，这是基于iPhone6的物理分辨率。有的设计师也许会偷懒，设计图上面没有任何的标注，如果我们边开发边量尺寸，无疑效率是比较低的。要么让设计师标注上，要么自食其力。如果设计师实在没有时间，推荐使用<a href="http://www.getmarkman.com/" target="_blank" rel="external">markman</a>进行标注，免费版阉割了一些功能（比如无法保存本地）不过基本满足了我们的需求了。</p>
<p>标注完成后开始写我们的样式，使用了淘宝的lib-flexible库之后，我们的根字体基准值就为750/100*10 = 75px。此时我们从图中若某个标注为100px，那么css中就应该设置为100/75 = 1.333333rem。所以为了提高开发效率，可以使用px转化为rem的插件。如果你使用sublimeText，可以用 <a href="https://packagecontrol.io/packages/rem-unit" target="_blank" rel="external">rem-unit</a><br><img src="http://qiniu.huzerui.com/image/2017-07-03-rem-unit.gif" alt="rem-unit"><br>如果你用vscode编辑器，推荐 <a href="https://marketplace.visualstudio.com/items?itemName=cipchk.cssrem" target="_blank" rel="external">cssrem</a><br><img src="http://qiniu.huzerui.com/image/2017-07-03-css-to-rem.gif" alt="pxtorem"></p>
<p>使用rem单位注意以下几点：</p>
<ol>
<li>在所有的单位中，font-size推荐使用px，然后结合媒体查询进行重要节点的控制，这样可以满足突出或者弱化某些字体的需求，而非整体调整。</li>
<li>众向的单位可以全部使用px，横向的使用rem，因为移动设备宽度有限，而高度可以无限向下滑动。但这也有特例，比如对于一些活动注册页面，需要在一屏幕内完全显示，没有下拉，这时候所有众向或者横向都应该使用rem作为单位。如图：<br><img src="http://qiniu.huzerui.com/image/2017-07-03-rem-description.jpg" alt="rem-desc"><br>左图的表单高度单位由于下边空距较大，使用px在不同屏幕显示更加；而右边的活动注册页由于不能出现滚动条，所有的众向高度、margin、padding都应该使用rem。</li>
<li>border、box-shadow、border-radius等一些效果应该使用px作为单位。</li>
</ol>
<h1 id="基于接口返回数据的属性注入"><a href="#基于接口返回数据的属性注入" class="headerlink" title="基于接口返回数据的属性注入"></a>基于接口返回数据的属性注入</h1><p>可能大家不明白什么叫”基于接口返回数据的属性注入”，在此之前，先说一下表单数据的绑定方式，一个重要的点是<strong>有几份表单就分开几个表单对象进行数据绑定</strong>。</p>
<p>已上图公积金查询为例，由于不同城市会有不同的查询要素，可能登陆方式只有一种，也可能有几种。比如上图有三种登陆方式，在使用vue布局时，有两种方案。一是只建立一个表单用于数据绑定，点击按钮触发判断；而是有几种登陆方式建立几个表单，用一个字段标识当前显示的表单。由于使用第三方的接口，一开始也没有先进行接口返回数据结构的查看，采用了第一种错误的方式，错误一是每种登陆方式下面的登陆要素的数量也不同，错误二是数据绑定在同一个表单data下，当用户在用户名登陆方式输入用户名密码后，切换到客户号登陆方式，就会出现数据错乱的情况。</p>
<p>解决完布局问题后，我们需要根据设计图定义一些状态，比如当前登陆方式的切换、同意授权状态的切换、按钮是否可以点击的状态、是否处于请求中的状态。当然还有一些app穿过来的数据，这里就忽略了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">data: &#123;</div><div class="line">    <span class="attr">tags</span>: &#123;</div><div class="line">        <span class="attr">arr</span>: [<span class="string">''</span>],</div><div class="line">        <span class="attr">activeIndex</span>: <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">isAgreeProxy</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">isLoading</span>: <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着审查一下接口返回的数据，推荐使用chrome插件postman，比如呼和浩特的登陆要素如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"code"</span>: <span class="number">2005</span>,</div><div class="line">    <span class="string">"data"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="string">"name"</span>: <span class="string">"login_type"</span>,</div><div class="line">            <span class="string">"label"</span>: <span class="string">"身份证号"</span>,</div><div class="line">            <span class="string">"fields"</span>: [</div><div class="line">                &#123;</div><div class="line">                    <span class="string">"name"</span>: <span class="string">"user_name"</span>,</div><div class="line">                    <span class="string">"label"</span>: <span class="string">"身份证号"</span>,</div><div class="line">                    <span class="string">"type"</span>: <span class="string">"text"</span></div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="string">"name"</span>: <span class="string">"user_pass"</span>,</div><div class="line">                    <span class="string">"label"</span>: <span class="string">"密码"</span>,</div><div class="line">                    <span class="string">"type"</span>: <span class="string">"password"</span></div><div class="line">                &#125;</div><div class="line">            ],</div><div class="line">            <span class="string">"value"</span>: <span class="string">"1"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="string">"name"</span>: <span class="string">" login_type"</span>,</div><div class="line">            <span class="string">"label"</span>: <span class="string">"公积金账号"</span>,</div><div class="line">            <span class="string">"fields"</span>: [</div><div class="line">                &#123;</div><div class="line">                    <span class="string">"name"</span>: <span class="string">"user_name"</span>,</div><div class="line">                    <span class="string">"label"</span>: <span class="string">"公积金账号"</span>,</div><div class="line">                    <span class="string">"type"</span>: <span class="string">"text"</span></div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="string">"name"</span>: <span class="string">"user_pass"</span>,</div><div class="line">                    <span class="string">"label"</span>: <span class="string">"密码"</span>,</div><div class="line">                    <span class="string">"type"</span>: <span class="string">"password"</span></div><div class="line">                &#125;</div><div class="line">            ],</div><div class="line">            <span class="string">"value"</span>: <span class="string">"0"</span></div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    <span class="string">"message"</span>: <span class="string">"登录要素请求成功"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到呼和浩特有两种授权登陆方式，我们在data中定义了一个loginWays，初始为空数组，接着methods中定义一个请求接口的函数，里面就是基于返回数据的基础上为上面fields对象注入一个input字段用于绑定，这就是所谓的基于接口返回数据的属性注入。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">    <span class="attr">queryloginWays</span>: <span class="function"><span class="keyword">function</span>(<span class="params">channel_type, channel_code</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> params = <span class="keyword">new</span> URLSearchParams();</div><div class="line">        params.append(<span class="string">'channel_type'</span>, channel_type);</div><div class="line">        params.append(<span class="string">'channel_code'</span>, channel_code);</div><div class="line">        axios.post(<span class="keyword">this</span>.loginParamsProxy, params)</div><div class="line">            .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(res);</div><div class="line">                <span class="keyword">var</span> code = res.code || res.data.code;</div><div class="line">                <span class="keyword">var</span> msg = res.message || res.data.message;</div><div class="line">                <span class="keyword">var</span> loginWays = res.data.data ? res.data.data : res.data;</div><div class="line">                <span class="comment">// 查询失败</span></div><div class="line">                <span class="keyword">if</span> (code != <span class="number">2005</span>) &#123;</div><div class="line">                    alert(msg);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 添加input字段用于v-model绑定</span></div><div class="line">                loginWays.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">loginWay</span>) </span>&#123;</div><div class="line">                    loginWay.fields.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">field</span>) </span>&#123;</div><div class="line">                        field.input = <span class="string">''</span>;</div><div class="line">                    &#125;)</div><div class="line">                &#125;)</div><div class="line">                <span class="keyword">this</span>.loginWays = loginWays;</div><div class="line">                <span class="keyword">this</span>.tags.arr = loginWays.map(<span class="function"><span class="keyword">function</span>(<span class="params">loginWay</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> loginWay.label;</div><div class="line">                &#125;)</div><div class="line">            &#125;.bind(<span class="keyword">this</span>))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>即使返回的数据有我们不需要的数据也没有关系，这样保证我们不会遗失进行下一步登陆所需要的数据。</p>
<p>这样多个表单绑定数据问题解决了，那么怎么进行页面间数据传递？如果是app传过来，那么通常使用URL拼接的方式，使用window.location.search获得queryString后再进行截取；如果通过页面套入javaWeb中，那么直接使用”${字段名}”就能获取，注意要js中获取java字段需要加双引号。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">        <span class="comment">// 真实姓名</span></div><div class="line">        realName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getQueryVariable(<span class="string">'name'</span>) || <span class="string">''</span></div><div class="line">        &#125;,</div><div class="line">        <span class="comment">// 身份证</span></div><div class="line">        identity: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">parseInt</span>(<span class="keyword">this</span>.getQueryVariable(<span class="string">'identity'</span>)) || <span class="string">''</span></div><div class="line">        &#125;,</div><div class="line">        <span class="comment">/*If javaWeb</span></div><div class="line">        realName: function() &#123;</div><div class="line">            return this.getQueryVariable('name') || ''</div><div class="line">        &#125;,</div><div class="line">        identity: function() &#123;</div><div class="line">            return parseInt(this.getQueryVariable('identity')) || ''</div><div class="line">        &#125;*/</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">getQueryVariable</span>: <span class="function"><span class="keyword">function</span>(<span class="params">variable</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> query = <span class="built_in">window</span>.location.search.substring(<span class="number">1</span>);</div><div class="line">            <span class="keyword">var</span> vars = query.split(<span class="string">'&amp;'</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; vars.length; i++) &#123;</div><div class="line">                <span class="keyword">var</span> pair = vars[i].split(<span class="string">'='</span>);</div><div class="line">                <span class="keyword">if</span> (<span class="built_in">decodeURIComponent</span>(pair[<span class="number">0</span>]) == variable) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(pair[<span class="number">1</span>]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Query variable %s not found'</span>, variable);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h1 id="关于前端跨域调试"><a href="#关于前端跨域调试" class="headerlink" title="关于前端跨域调试"></a>关于前端跨域调试</h1><p>在进行接口请求时，我们的页面通常是在sublime的本地服务器或者vscode本地服务器预览，所以请求接口会遇到跨域的问题。<br>在项目构建的时候通常我们源代码会放在src文件夹下，然后使用gulp进行代码的压缩、合并、图片的优化（根据需要）等等，我们会使用gulp。这里解决跨域的问题可以用<a href="https://www.npmjs.com/package/gulp-connect" target="_blank" rel="external">gulp-connect</a>结合<a href="https://www.npmjs.com/package/http-proxy-middleware" target="_blank" rel="external">http-proxy-middleware</a>，此时我们在gulp-connect中的本地服务器进行预览调试。<br>gulpfile.js如下： 开发过程使用gulp server命令，监听文件改动并使用livereload刷新；使用gulp命令进行打包。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"><span class="keyword">var</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>);</div><div class="line"><span class="keyword">var</span> useref = <span class="built_in">require</span>(<span class="string">'gulp-useref'</span>);</div><div class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>(<span class="string">'gulp-connect'</span>);</div><div class="line"><span class="keyword">var</span> proxyMiddleware = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 定义环境变量，若为 dev，则代理src目录； 若为prod，则代理dist目录</span></div><div class="line"><span class="keyword">var</span> env = <span class="string">'prod'</span></div><div class="line"></div><div class="line"><span class="comment">// 跨域代理  将localhost:8088/api 映射到 https://api.shujumohe.com/</span></div><div class="line">gulp.task(<span class="string">'server'</span>, [<span class="string">'listen'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> middleware = proxyMiddleware([<span class="string">'/api'</span>], &#123;</div><div class="line">        <span class="attr">target</span>: <span class="string">'https://api.shujumohe.com/'</span>,</div><div class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">pathRewrite</span>: &#123;</div><div class="line">            <span class="string">'^/api'</span>: <span class="string">'/'</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    connect.server(&#123;</div><div class="line">        <span class="attr">root</span>: env == <span class="string">'dev'</span> ? <span class="string">'./src'</span> : <span class="string">'./dist'</span>,</div><div class="line">        <span class="attr">port</span>: <span class="number">8088</span>,</div><div class="line">        <span class="attr">livereload</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">middleware</span>: <span class="function"><span class="keyword">function</span>(<span class="params">connect, opt</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> [middleware]</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/*.html'</span>)</div><div class="line">        .pipe(useref())</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>));</div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/css/main.css'</span>)</div><div class="line">        .pipe(concat(<span class="string">'main.css'</span>))</div><div class="line">        .pipe(autoprefixer(&#123;</div><div class="line">            <span class="attr">browsers</span>: [<span class="string">'last 2 versions'</span>],</div><div class="line">            <span class="attr">cascade</span>: <span class="literal">false</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/css/'</span>));</div><div class="line"></div><div class="line">    gulp.src(<span class="string">'src/css/share.css'</span>)</div><div class="line">        .pipe(concat(<span class="string">'share.css'</span>))</div><div class="line">        .pipe(autoprefixer(&#123;</div><div class="line">            <span class="attr">browsers</span>: [<span class="string">'last 2 versions'</span>],</div><div class="line">            <span class="attr">cascade</span>: <span class="literal">false</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/css/'</span>));</div><div class="line"></div><div class="line">    gulp.src(<span class="string">'src/vendors/css/*.css'</span>)</div><div class="line">        .pipe(concat(<span class="string">'vendors.min.css'</span>))</div><div class="line">        .pipe(autoprefixer(&#123;</div><div class="line">            <span class="attr">browsers</span>: [<span class="string">'last 2 versions'</span>],</div><div class="line">            <span class="attr">cascade</span>: <span class="literal">false</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/vendors/css'</span>));</div><div class="line">    <span class="keyword">return</span> gulp</div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'src/vendors/js/*.js'</span>)</div><div class="line">        .pipe(concat(<span class="string">'vendors.min.js'</span>))</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/vendors/js'</span>));</div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'img'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/imgs/*'</span>)</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/imgs'</span>));</div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'listen'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'./src/css/*.css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        gulp.src([<span class="string">'./src/css/*.css'</span>])</div><div class="line">            .pipe(connect.reload());</div><div class="line">    &#125;);</div><div class="line">    gulp.watch(<span class="string">'./src/js/*.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        gulp.src([<span class="string">'./src/js/*.js'</span>])</div><div class="line">            .pipe(connect.reload());</div><div class="line">    &#125;);</div><div class="line">    gulp.watch(<span class="string">'./src/*.html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        gulp.src([<span class="string">'./src/*.html'</span>])</div><div class="line">            .pipe(connect.reload());</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'html'</span>, <span class="string">'css'</span>, <span class="string">'js'</span>, <span class="string">'img'</span>]);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近参与了APP内嵌H5页面的开发，这次使用vuejs替代了jQuery，仅仅把vuejs当做一个库来使用，效率提高之外代码可读性更强，在此分享一下自己的一些开发中总结的经验。&lt;/p&gt;
&lt;h1 id=&quot;关于布局方案&quot;&gt;&lt;a href=&quot;#关于布局方案&quot; class=&quot;hea
    
    </summary>
    
      <category term="前端" scheme="http://www.huzerui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vuejs" scheme="http://www.huzerui.com/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>关于异步函数的回调问题</title>
    <link href="http://www.huzerui.com/2017/03/30/solve-asyncfun-callback-problem/"/>
    <id>http://www.huzerui.com/2017/03/30/solve-asyncfun-callback-problem/</id>
    <published>2017-03-30T03:37:43.000Z</published>
    <updated>2017-07-02T10:50:22.747Z</updated>
    
    <content type="html"><![CDATA[<p>我们在项目中经常需要根据异步请求结果进行相关操作，以往常用的方法是callback，但现在如果结合babel编译，用promise或者async会更加优雅。如下是错误的做法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 异步之后进行相关操作的错误做法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFun</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> flag = <span class="literal">false</span>;</div><div class="line">	$.ajax(&#123;</div><div class="line">		<span class="attr">url</span>: <span class="string">'https://api.github.com/'</span>,</div><div class="line">		<span class="attr">type</span>: <span class="string">'get'</span></div><div class="line">	&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(res.code == <span class="number">1</span>)&#123;</div><div class="line">			flag = <span class="literal">true</span></div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">	<span class="keyword">return</span> flag;    <span class="comment">// 这里始终返回false，因为异步请求不阻塞后面代码执行</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(asyncFun())&#123;</div><div class="line">	<span class="comment">// 由于flag始终为false，很明显这里永远不会执行</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解决方案有三种：传统回调方式，ES5Promise对象，ES6 async/await方式</p>
<h1 id="回调函数方式"><a href="#回调函数方式" class="headerlink" title="回调函数方式"></a>回调函数方式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义一个异步函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFun</span>(<span class="params">cb</span>)</span>&#123;</div><div class="line">	$.ajax(&#123;</div><div class="line">		<span class="attr">url</span>: <span class="string">'https://api.github.com/'</span>,</div><div class="line">		<span class="attr">type</span>: <span class="string">'get'</span></div><div class="line">	&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">		cb &amp;&amp; cb(res)</div><div class="line">	&#125;)</div><div class="line">&#125;</div><div class="line">asyncFun(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">	<span class="comment">// 根据异步请求返回的结果进行相关操作</span></div><div class="line">	<span class="keyword">if</span>(res.code == <span class="number">1</span>)&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h1 id="使用ES6引入的promise对象"><a href="#使用ES6引入的promise对象" class="headerlink" title="使用ES6引入的promise对象"></a>使用ES6引入的promise对象</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFun</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">		$.ajax(&#123;</div><div class="line">			<span class="attr">url</span>: <span class="string">'https://api.github.com/'</span>,</div><div class="line">			<span class="attr">type</span>: <span class="string">'get'</span></div><div class="line">		&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">			resolve(res)</div><div class="line">		&#125;)</div><div class="line">	&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">asyncFun().then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(res.code == <span class="number">1</span>)&#123;</div><div class="line">		<span class="comment">// 你要进行相关的操作</span></div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>如果后面的操作不只一次，你可以定义多个返回Promise对象的函数，像这样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFun2</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">	<span class="comment">// 这里可以获取asyncFun传过来的res</span></div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">		$.ajax(&#123;</div><div class="line">			<span class="attr">url</span>: <span class="string">'https://api.github.com/'</span>,</div><div class="line">			<span class="attr">type</span>: <span class="string">'get'</span></div><div class="line">		&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">res2</span>)</span>&#123;</div><div class="line">			resolve(res2)</div><div class="line">		&#125;)</div><div class="line">	&#125;)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFun3</span>(<span class="params">res2</span>)</span>&#123;</div><div class="line">	<span class="comment">// 这里可以获取asyncFun2传过来的res2</span></div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">		$.ajax(&#123;</div><div class="line">			<span class="attr">url</span>: <span class="string">'https://api.github.com/'</span>,</div><div class="line">			<span class="attr">type</span>: <span class="string">'get'</span></div><div class="line">		&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">res3</span>)</span>&#123;</div><div class="line">			resolve(res3)</div><div class="line">		&#125;)</div><div class="line">	&#125;)</div><div class="line">&#125;</div><div class="line">asyncFun().then(asyncFun2).then(asyncFun3)</div></pre></td></tr></table></figure></p>
<p>说明：</p>
<ul>
<li>这种写法十分类似jQuery的链式写法，只要返回<strong>Promise对象，就拥有then()及catch()</strong>方法，后者用于捕捉回调运行时发生的错误。</li>
<li>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve方法和reject方法。如果异步操作成功，则用resolve方法将Promise对象的状态变为“成功”（即从<strong>pending变为resolved</strong>）；如果异步操作失败，则用reject方法将状态变为“失败”（即从<strong>pending变为rejected</strong>）</li>
<li>then方法其实有两个参数，<strong>第一个参数</strong>作为上一步操作<strong>resolve时的回调函数</strong>，如果上一步操作后<strong>状态变为rejected</strong>，则以<strong>第二个参数作为回调函数</strong></li>
</ul>
<h1 id="使用ES7关键字async-await——异步终极解决方案"><a href="#使用ES7关键字async-await——异步终极解决方案" class="headerlink" title="使用ES7关键字async/await——异步终极解决方案"></a>使用ES7关键字async/await——异步终极解决方案</h1><p>ES7 中有了更加标准的解决方案，新增了<strong>async/await</strong>两个关键词，async可以声明一个异步函数，此函数需要返回一个 Promise对象。await 可以等待一个 Promise 对象 resolve，并拿到结果。<br>现在要实现上面的需求，可以这样：</p>
<p>基本规则</p>
<ul>
<li>async 表示这是一个async函数，await只能用在这个函数里面。</li>
<li>await 表示在这里等待promise返回结果了，再继续执行。</li>
<li>await 后面跟着的应该是一个promise对象（当然，其他返回值也没关系，只是会立即执行，不过那样就没有意义）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">		$.ajax(&#123;</div><div class="line">			<span class="attr">url</span>: <span class="string">'https://api.github.com/'</span>,</div><div class="line">			<span class="attr">type</span>: <span class="string">'get'</span></div><div class="line">		&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">			resolve(res)</div><div class="line">		&#125;)</div><div class="line">	&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncFun</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> res = <span class="keyword">await</span> getData();</div><div class="line">	<span class="keyword">if</span>(res.code == <span class="number">1</span>)&#123;</div><div class="line">		<span class="comment">//进行相关操作</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="使用async-await捕获异常"><a href="#使用async-await捕获异常" class="headerlink" title="使用async/await捕获异常"></a>使用async/await捕获异常</h1><p>这里说下捕获异步操作中的异常问题，既然then不用写，那么catch也可以不用了，可以直接用标准的try/catch语法捕捉错误。</p>
<p>常犯的错误是使用try/catch捕获异步函数的异常，这时候因为try/catch块执行完了，异步函数很可能还没有完成，异常还没有被实际抛出。当异常被抛出的时候，由于catch块已经执行完了，此时就会导致进程崩溃。如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 错误的示例</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	$.ajax(&#123;</div><div class="line">		<span class="attr">url</span>: <span class="string">'https://api.github.com/'</span>,</div><div class="line">		<span class="attr">type</span>: <span class="string">'get'</span></div><div class="line">	&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">// 模拟异常</span></div><div class="line">		<span class="literal">null</span>();</div><div class="line">	&#125;)</div><div class="line">&#125;</div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">	getData();</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'我会被打印'</span>);</div><div class="line">&#125;<span class="keyword">catch</span>(e)&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'error'</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// '我会被打印'</span></div><div class="line"><span class="comment">// undefined</span></div><div class="line"><span class="comment">// Uncaught TypeError: null is not a function</span></div></pre></td></tr></table></figure></p>
<p>可以看到异步请求中的异常无法被正常捕获,’error’并没有被打印出来，console.log(‘我会被打印’)仍然执行了，使用async/await可以很容易解决这个问题</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">		$.ajax(&#123;</div><div class="line">			<span class="attr">url</span>: <span class="string">'https://api.github.com/'</span>,</div><div class="line">			<span class="attr">type</span>: <span class="string">'get'</span></div><div class="line">		&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="comment">// 模拟异常</span></div><div class="line">			reject(<span class="string">'error'</span>)</div><div class="line">		&#125;)</div><div class="line">	&#125;)</div><div class="line">&#125;</div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncFun</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">try</span>&#123;</div><div class="line">		<span class="keyword">await</span> getData();</div><div class="line">		<span class="comment">// 这里以下的代码不被执行</span></div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'我不会被打印'</span>);</div><div class="line">	&#125;<span class="keyword">catch</span>(err)&#123;</div><div class="line">		<span class="built_in">console</span>.log(err);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">async</span>();       <span class="comment">// Promise&#123;&#125;</span></div><div class="line">			   <span class="comment">// error</span></div></pre></td></tr></table></figure>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ol>
<li>从回调到promise再到async/await解决步式操作需求的问题，可以看到代码易读性明显增强了，async/await不仅去除了嵌套问题，也不用再用链式写法的then了。</li>
<li>async/await只是一套语法糖，其他语言的async/await可能是协程或者多线程编程的语法糖，JS本身是单线程的，async/await与传统的callback或者promise执行起来并无两样</li>
<li>ES7 async/await仍未成标准，最新版谷歌已经支持，但大部分浏览器仍没有实现，要使用它可以用babel编译成浏览器支持的ES5。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在项目中经常需要根据异步请求结果进行相关操作，以往常用的方法是callback，但现在如果结合babel编译，用promise或者async会更加优雅。如下是错误的做法：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;
    
    </summary>
    
      <category term="前端" scheme="http://www.huzerui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://www.huzerui.com/tags/js/"/>
    
      <category term="es6" scheme="http://www.huzerui.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>Vuejs2.0 Demo</title>
    <link href="http://www.huzerui.com/2017/02/04/vuejs-demo/"/>
    <id>http://www.huzerui.com/2017/02/04/vuejs-demo/</id>
    <published>2017-02-04T07:12:19.000Z</published>
    <updated>2017-05-12T07:10:12.815Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间利用闲暇时间学习Vuejs并且做了一个实例，主要使用vue-router实现路由控制，vuex对程序进行状态管理，axios发送http请求。对数据在组件间的传递、webpack打包工具、数据的双向绑定有更深刻的了解和认识。<br><img src="http://huzerui.com/blog/img/post/2017-02-04-vue2.0-demo-poster.gif" alt="预览图"></p>
<p>项目在线地址：<a href="http://www.huzerui.com/vue2.0-demo/">http://www.huzerui.com/vue2.0-demo/</a><br>Github地址：<a href="https://github.com/alex1504/vue2.0-demo" target="_blank" rel="external">https://github.com/alex1504/vue2.0-demo</a></p>
<p>扫描二维码预览：<br><img src="/blog/img/post/2017-03-04-vuejs-demo-qrcode.png" alt="二维码地址"></p>
<h1 id="更新记录："><a href="#更新记录：" class="headerlink" title="更新记录："></a>更新记录：</h1><p>2017.1.13 主导航电影、音乐、图书、图片使用router跳转电影模块使用tab菜单切换各个列表模块下拉滚动加载图片模块使用flex布局实现瀑布流效果<br>2017.1.17 增加了电影详情模块，优化路由跳转<br>2017.1.18 增加了登录、登出模块，使用leancloud数据存储功能<br>2017.1.19 增加了图片详情模块，增加了新的生产依赖vue-touch<br>2017.2.6 新增用户注册模块</p>
<h1 id="开发依赖："><a href="#开发依赖：" class="headerlink" title="开发依赖："></a>开发依赖：</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="string">"babel-core"</span>: <span class="string">"^6.0.0"</span>,</div><div class="line"><span class="string">"babel-loader"</span>: <span class="string">"^6.0.0"</span>,</div><div class="line"><span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.0.0"</span>,</div><div class="line"><span class="string">"cross-env"</span>: <span class="string">"^3.0.0"</span>,</div><div class="line"><span class="string">"css-loader"</span>: <span class="string">"^0.25.0"</span>,</div><div class="line"><span class="string">"file-loader"</span>: <span class="string">"^0.9.0"</span>,</div><div class="line"><span class="string">"mockjs"</span>: <span class="string">"^1.0.1-beta3"</span>,</div><div class="line"><span class="string">"node-sass"</span>: <span class="string">"^4.2.0"</span>,</div><div class="line"><span class="string">"sass"</span>: <span class="string">"^0.5.0"</span>,</div><div class="line"><span class="string">"sass-loader"</span>: <span class="string">"^4.0.0"</span>,</div><div class="line"><span class="string">"style-loader"</span>: <span class="string">"^0.13.1"</span>,</div><div class="line"><span class="string">"vue-loader"</span>: <span class="string">"^10.0.0"</span>,</div><div class="line"><span class="string">"vue-style-loader"</span>: <span class="string">"^1.0.0"</span>,</div><div class="line"><span class="string">"vue-template-compiler"</span>: <span class="string">"^2.1.0"</span>,</div><div class="line"><span class="string">"webpack"</span>: <span class="string">"^2.1.0-beta.25"</span>,</div><div class="line"><span class="string">"webpack-dev-server"</span>: <span class="string">"^2.1.0-beta.9"</span></div></pre></td></tr></table></figure>
<h1 id="生产环境依赖："><a href="#生产环境依赖：" class="headerlink" title="生产环境依赖："></a>生产环境依赖：</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">"axios"</span>: <span class="string">"^0.15.3"</span>,</div><div class="line"><span class="string">"vue"</span>: <span class="string">"^2.1.0"</span>,</div><div class="line"><span class="string">"vue-material"</span>: <span class="string">"^0.5.2"</span>,</div><div class="line"><span class="string">"vue-router"</span>: <span class="string">"^2.1.1"</span>,</div><div class="line"><span class="string">"vue-swipe"</span>: <span class="string">"^2.0.2"</span>,</div><div class="line"><span class="string">"vue-touch"</span>: <span class="string">"^2.0.0-beta.3"</span>,</div><div class="line"><span class="string">"vuex"</span>: <span class="string">"^2.1.1"</span></div></pre></td></tr></table></figure>
<h1 id="使用的接口："><a href="#使用的接口：" class="headerlink" title="使用的接口："></a>使用的接口：</h1><p><a href="https://developers.douban.com/wiki/?title=api_v2" target="_blank" rel="external">豆瓣电影图书接口</a>、gankio图片接口、网易云音乐专辑及搜索接口（见<a href="https://github.com/alex1504/vue2.0-demo/tree/gh-pages/src/components" target="_blank" rel="external">components</a>中请求部分）</p>
<h1 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h1><ul>
<li>Vue-material中的spinner组件在某些浏览器无法正常显示，在chrome以及微信中体验效果较好。</li>
<li>由于众所周知的原因，Vue-material中的原生icon使用了阿里的<a href="http://www.iconfont.cn/" target="_blank" rel="external">iconfont</a>替代。（已经在许多歌项目使用，表示图标非常丰富，调用方式多样）</li>
<li>由于ithub访问速度原因，初次加载需稍等片刻。</li>
<li>登录及注册使用了Leancloud的后端云服务，关于如何使用你可以点<a href="https://leancloud.cn/docs/demo.html" target="_blank" rel="external">这里</a>查看LeanCloud搭建的各类应用演示。</li>
</ul>
<h1 id="关于使用Leancloud接口"><a href="#关于使用Leancloud接口" class="headerlink" title="关于使用Leancloud接口"></a>关于使用Leancloud接口</h1><p>细心的小伙伴应该会发现，使用LN接口必须使用AV.init对接口进行初始化，接收的参数是你的APPID和APPScret，也就是说即使我们的项目不开源，通过前端审查脚本也可以知道你的应用id及密钥，进而可以轻松调取你的接口做坏坏的事情。<br>为此如果你需要纯前后端分离的进行接口调用，LN给予的安全方案是配置web安全域名，也就是只有安全域名才能访问你的接口。<br><img src="/blog/img/post/2017-02-04-leancloud-web-security.png" alt="安全域名"><br>另外更稳妥的做法是传统开发APP的方式，将APPID和APPScret在后台代码中对接口进行初始化，前端就审查不到了，比如koa就可以单独为静态文件设置公开访问的静态目录，对于敏感数据文件可以设置存放在安全的前端无法访问的目录下面。<br>在有后端对接口实现复杂的逻辑封装的时候，推荐LN官方推出的<a href="https://leancloud.cn/docs/leanengine_overview.html" target="_blank" rel="external">LeanEngine</a>运行方案，有Nodejs、Pythod、PHP、Java四个版本。</p>
<h1 id="感触："><a href="#感触：" class="headerlink" title="感触："></a>感触：</h1><ol>
<li>MVVM三分天下，如果你希望一个轻巧、易上手、文档详尽的框架，选择<a href="https://cn.vuejs.org/" target="_blank" rel="external">Vuejs</a></li>
<li>如果你十分熟练jQuery的用法，在Vuejs中你很容易发现一些遗传着“经典”的足迹</li>
<li>仔细发现，如果你学习过js设计模式，你会觉得Vuejs的设计很像其中一种模式——单例模式</li>
<li>如果你需要做一个小型应用，不妨使用后端云服务（比如<a href="https://leancloud.cn/" target="_blank" rel="external">LeanCloud</a>、<a href="http://www.bmob.cn/" target="_blank" rel="external">Bomb</a>、<a href="https://maxleap.cn/s/web/zh_cn/index.html" target="_blank" rel="external">maxLeap</a>），既减少你的开发时间也减少开发成本；但大型的应用和数据敏感型的应用肯定是不推荐用别人的服务器的。</li>
<li>ES6还没完全支持，ES7就发布了，关于js逐渐融合各种语言优良特性不断发展的前景个人是十分看好的，毕竟js创始人Brendan Eich仅用几天时间就完成了它的设计。在开发过程中也确实因为js的某些缺陷增大了开发的代码量，不得不用一些设计模式去弥补。关于ES6、ES7的新特性，会在今后逐渐学习并记录。</li>
<li>见过一些reactNative制作的应用，体验和原生APP无任何差别，有Vue Native么？不妨给它加层包装，叫做<a href="https://weex.incubator.apache.org/cn/" target="_blank" rel="external">weex</a>，后面也会慢慢地了解和学习。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间利用闲暇时间学习Vuejs并且做了一个实例，主要使用vue-router实现路由控制，vuex对程序进行状态管理，axios发送http请求。对数据在组件间的传递、webpack打包工具、数据的双向绑定有更深刻的了解和认识。&lt;br&gt;&lt;img src=&quot;http://
    
    </summary>
    
      <category term="前端" scheme="http://www.huzerui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://www.huzerui.com/tags/js/"/>
    
      <category term="vuejs" scheme="http://www.huzerui.com/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>常用的Lodash方法</title>
    <link href="http://www.huzerui.com/2017/01/22/lodash-useful-function/"/>
    <id>http://www.huzerui.com/2017/01/22/lodash-useful-function/</id>
    <published>2017-01-22T14:39:31.000Z</published>
    <updated>2017-05-22T14:45:27.941Z</updated>
    
    <content type="html"><![CDATA[<p>Lodash目前非常流行的JavaScript的工具集合框架，被前端开发者广泛地使用，下面是一些平常开发过程中常用的函数。</p>
<p>在介绍函数前，对lodash函数名应有如下的了解：</p>
<ul>
<li>含sorted的方法接受有序数组</li>
<li>同名含By的方法额外接受一个迭代器参数</li>
<li>同名含Last的方法返回的是符合筛选条件元素的最后一个</li>
</ul>
<h2 id="对象扩展："><a href="#对象扩展：" class="headerlink" title="对象扩展："></a>对象扩展：</h2><p>_.assign</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = &#123; <span class="attr">a</span>: <span class="string">"a property"</span> &#125;;</div><div class="line"><span class="keyword">var</span> bar = &#123; <span class="attr">b</span>: <span class="number">4</span>, <span class="attr">c</span>: <span class="string">"an other property"</span> &#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = _.assign(&#123; <span class="attr">a</span>: <span class="string">"an old property"</span> &#125;, foo, bar);</div><div class="line"><span class="comment">// result =&gt; &#123; a: 'a property', b: 4, c: 'an other property' &#125;</span></div></pre></td></tr></table></figure>
<h2 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a>防抖函数</h2><p>_.debounce</p>
<p>在触发防抖函数的事件后面加个延迟时间，如果在该延迟时间内没有继续触发事件，那么执行防抖函数。设想一个场景，电梯门打开的时候，如果在2s内陆续有人按电梯按钮，那么每次电梯都会再重新等待2s，直至2s中没人按按钮再触发关门操作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateEmail</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Validate email here and show error message if not valid</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> emailInput = <span class="built_in">document</span>.getElementById(<span class="string">"email-field"</span>);</div><div class="line">emailInput.addEventListener(<span class="string">"keyup"</span>, _.debounce(validateEmail, <span class="number">500</span>));</div></pre></td></tr></table></figure></p>
<h2 id="迭代函数n次"><a href="#迭代函数n次" class="headerlink" title="迭代函数n次"></a>迭代函数n次</h2><ul>
<li>返回：每次返回结果构成的数组</li>
<li>应用：生成大量测试数据</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomInteger</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">100</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = _.times(<span class="number">5</span>, getRandomNumber);</div><div class="line"><span class="comment">// result =&gt; [64, 70, 29, 10, 23]</span></div></pre></td></tr></table></figure>
<h2 id="查找数组中的特定对象"><a href="#查找数组中的特定对象" class="headerlink" title="查找数组中的特定对象"></a>查找数组中的特定对象</h2><p>接收多个对象属性查找<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> users = [</div><div class="line">  &#123; <span class="attr">firstName</span>: <span class="string">"John"</span>, <span class="attr">lastName</span>: <span class="string">"Doe"</span>, <span class="attr">age</span>: <span class="number">28</span>, <span class="attr">gender</span>: <span class="string">"male"</span> &#125;,</div><div class="line">  &#123; <span class="attr">firstName</span>: <span class="string">"Jane"</span>, <span class="attr">lastName</span>: <span class="string">"Doe"</span>, <span class="attr">age</span>: <span class="number">5</span>, <span class="attr">gender</span>: <span class="string">"female"</span> &#125;,</div><div class="line">  &#123; <span class="attr">firstName</span>: <span class="string">"Jim"</span>, <span class="attr">lastName</span>: <span class="string">"Carrey"</span>, <span class="attr">age</span>: <span class="number">54</span>, <span class="attr">gender</span>: <span class="string">"male"</span> &#125;,</div><div class="line">  &#123; <span class="attr">firstName</span>: <span class="string">"Kate"</span>, <span class="attr">lastName</span>: <span class="string">"Winslet"</span>, <span class="attr">age</span>: <span class="number">40</span>, <span class="attr">gender</span>: <span class="string">"female"</span> &#125;</div><div class="line">];</div><div class="line"></div><div class="line"><span class="keyword">var</span> user = _.find(users, &#123; <span class="attr">lastName</span>: <span class="string">"Doe"</span>, <span class="attr">gender</span>: <span class="string">"male"</span> &#125;);</div><div class="line"><span class="comment">// user -&gt; &#123; firstName: "John", lastName: "Doe", age: 28, gender: "male" &#125;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> underAgeUser = _.find(users, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> user.age &lt; <span class="number">18</span>;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// underAgeUser -&gt; &#123; firstName: "Jane", lastName: "Doe", age: 5, gender: "female" &#125;</span></div></pre></td></tr></table></figure></p>
<h2 id="设置及获取对象属性"><a href="#设置及获取对象属性" class="headerlink" title="设置及获取对象属性"></a>设置及获取对象属性</h2><p>根据对象路径进行设置或获取</p>
<ul>
<li>_set方法：如果路径不存在，会自动创建路径。像下面的例子，使用该方法不会再出现“Cannot set property ‘items’ of undefined” error.”这种错误</li>
<li>_get方法：如果对象路径不存在，返回undefined而不会报错，第三个参数接收默认值。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bar = &#123; <span class="attr">foo</span>: &#123; <span class="attr">key</span>: <span class="string">"foo"</span> &#125; &#125;;</div><div class="line">_.set(bar, <span class="string">"foo.items[0]"</span>, <span class="string">"An item"</span>);</div><div class="line"><span class="comment">// bar =&gt; &#123; foo: &#123; key: "foo", items: ["An item"] &#125; &#125;</span></div><div class="line"><span class="keyword">var</span> name = _.get(bar, <span class="string">"name"</span>, <span class="string">"John Doe"</span>);</div><div class="line"><span class="comment">// name =&gt; John Doe</span></div></pre></td></tr></table></figure>
<h2 id="将对象数组重组成对象映射"><a href="#将对象数组重组成对象映射" class="headerlink" title="将对象数组重组成对象映射"></a>将对象数组重组成对象映射</h2><ul>
<li>只要服务器返回的是个集合对象，就可以通过该方法将集合转成对象映射</li>
<li>第二个参数也可以是函数，函数的第一个参数默认是数组中的一个对象</li>
</ul>
<p>如从100篇文章中选取出id为34abc的文章，当获取到文章数组后，怎么做？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> posts = [</div><div class="line">    &#123; <span class="attr">id</span>: <span class="string">"1abc"</span>, <span class="attr">title</span>: <span class="string">"First blog post"</span>, <span class="attr">content</span>: <span class="string">"..."</span> &#125;,</div><div class="line">    &#123; <span class="attr">id</span>: <span class="string">"2abc"</span>, <span class="attr">title</span>: <span class="string">"Second blog post"</span>, <span class="attr">content</span>: <span class="string">"..."</span> &#125;,</div><div class="line">    <span class="comment">// more blog posts</span></div><div class="line">    &#123; <span class="attr">id</span>: <span class="string">"34abc"</span>, <span class="attr">title</span>: <span class="string">"The blog post we want"</span>, <span class="attr">content</span>: <span class="string">"..."</span> &#125;</div><div class="line">    <span class="comment">// even more blog posts</span></div><div class="line">];</div><div class="line"></div><div class="line">posts = _.keyBy(posts, <span class="string">"id"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> post = posts[<span class="string">"34abc"</span>]</div><div class="line"><span class="comment">// post -&gt; &#123; id: "34abc", title: "The blog post we want", content: "..." &#125;</span></div></pre></td></tr></table></figure></p>
<h2 id="遍历集合元素并返回特定格式的对象"><a href="#遍历集合元素并返回特定格式的对象" class="headerlink" title="遍历集合元素并返回特定格式的对象"></a>遍历集合元素并返回特定格式的对象</h2><ul>
<li>通过 iteratee 遍历集合中的每个元素。 每次返回的值会作为下一次 iteratee 使用。 如果没有提供accumulator（第三个参数，即初始值），则集合中的第一个元素作为 accumulator。</li>
<li>常见的错误是忽略了返回结果(return result)和没有传入函数的第三个参数(默认值)</li>
</ul>
<p>下面的例子从数组筛选符合年龄条件并由年龄进行分组的数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> users = [</div><div class="line">    &#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</div><div class="line">    &#123; <span class="attr">name</span>: <span class="string">"Jane"</span>, <span class="attr">age</span>: <span class="number">28</span> &#125;,</div><div class="line">    &#123; <span class="attr">name</span>: <span class="string">"Bill"</span>, <span class="attr">age</span>: <span class="number">65</span> &#125;,</div><div class="line">    &#123; <span class="attr">name</span>: <span class="string">"Emily"</span>, <span class="attr">age</span>: <span class="number">17</span> &#125;,</div><div class="line">    &#123; <span class="attr">name</span>: <span class="string">"Jack"</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;</div><div class="line">]</div><div class="line"></div><div class="line"><span class="keyword">var</span> reducedUsers = _.reduce(users, <span class="function"><span class="keyword">function</span> (<span class="params">result, user</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(user.age &gt;= <span class="number">18</span> &amp;&amp; user.age &lt;= <span class="number">59</span>) &#123;</div><div class="line">        (result[user.age] || (result[user.age] = [])).push(user);</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;, &#123;&#125;);</div><div class="line"></div><div class="line"><span class="comment">// reducedUsers -&gt; &#123; </span></div><div class="line"><span class="comment">//     28: [&#123; name: "Jane", age: 28 &#125;], </span></div><div class="line"><span class="comment">//     30: [&#123; name: "John", age: 30 &#125;, &#123; name: "Jack", age: 30 &#125;] </span></div><div class="line"><span class="comment">// &#125;</span></div></pre></td></tr></table></figure></p>
<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>_.cloneDeep()<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> original = &#123; <span class="attr">foo</span>: <span class="string">"bar"</span> &#125;;</div><div class="line"><span class="keyword">var</span> copy = original;</div><div class="line">copy.foo = <span class="string">"new value"</span>;</div><div class="line"><span class="comment">// copy -&gt; &#123; foo: "new value" &#125; Yeah!</span></div><div class="line"><span class="comment">// original -&gt; &#123; foo: "new value" &#125; Oops!</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> original = &#123; <span class="attr">foo</span>: <span class="string">"bar"</span> &#125;;</div><div class="line"><span class="keyword">var</span> copy = _.cloneDeep(original);</div><div class="line">copy.foo = <span class="string">"new value"</span>;</div><div class="line"><span class="comment">// copy -&gt; &#123; foo: "new value" &#125; Yeah!</span></div><div class="line"><span class="comment">// original -&gt; &#123; foo: "bar" &#125; Yeah!</span></div></pre></td></tr></table></figure></p>
<h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>_.clone()</p>
<p>对于对象内部的引用类型不会拷贝，而是指向同一个存在堆中的地址<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> objects = [&#123; <span class="string">'a'</span>: <span class="number">1</span> &#125;, &#123; <span class="string">'b'</span>: <span class="number">2</span> &#125;];</div><div class="line"></div><div class="line"><span class="keyword">var</span> shallow = _.clone(objects);</div><div class="line"><span class="built_in">console</span>.log(shallow[<span class="number">0</span>] === objects[<span class="number">0</span>]);</div><div class="line"><span class="comment">// =&gt; true</span></div></pre></td></tr></table></figure></p>
<h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><p><em>uniq() 与 </em>. sortedUniq()<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sortedArray = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">8</span>];</div><div class="line"><span class="keyword">var</span> result = _.sortedUniq(sortedArray);</div><div class="line"><span class="comment">// -&gt; [1, 2, 3, 5, 8]</span></div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>_.uniq</td>
<td>数组去重</td>
</tr>
<tr>
<td>_.sortedUniq</td>
<td>对于已排序的数组性能更高</td>
</tr>
</tbody>
</table>
<h2 id="向有序数组中插入元素，依旧保证有序"><a href="#向有序数组中插入元素，依旧保证有序" class="headerlink" title="向有序数组中插入元素，依旧保证有序"></a>向有序数组中插入元素，依旧保证有序</h2><p>返回：插入元素在数组中的索引</p>
<p>方法：都含有sorted表示接受有序数组</p>
<ul>
<li>_.sortedIndex</li>
<li>_.sortedIndexBy</li>
<li>_.sortedLastIndex</li>
<li>_.sortedLastIndexBy</li>
</ul>
<p>含Last方法和不含Last方法的区别是：<br>Last方法在保持有序的前提下会把value插进最大的那个位置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> objects = [&#123; <span class="string">'x'</span>: <span class="number">4</span> &#125;, &#123; <span class="string">'x'</span>: <span class="number">5</span> &#125;];</div><div class="line"> </div><div class="line">_.sortedLastIndexBy(objects, &#123; <span class="string">'x'</span>: <span class="number">4</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123; <span class="keyword">return</span> o.x; &#125;);</div><div class="line"><span class="comment">// =&gt; 1</span></div><div class="line"> </div><div class="line">_.sortedLastIndexBy(objects, &#123; <span class="string">'x'</span>: <span class="number">4</span> &#125;, <span class="string">'x'</span>);</div><div class="line"><span class="comment">// =&gt; 1</span></div></pre></td></tr></table></figure></p>
<h2 id="参考及延伸"><a href="#参考及延伸" class="headerlink" title="参考及延伸"></a>参考及延伸</h2><blockquote>
<p>Lodash官方文档(4.17.4)：<a href="https://lodash.com/docs/4.17.4" target="_blank" rel="external">https://lodash.com/docs/4.17.4</a><br>Lodash中文文档(3.10.1)：<a href="http://lodashjs.com/docs/" target="_blank" rel="external">http://lodashjs.com/docs/</a><br>Lodash/fp模块：<a href="https://github.com/lodash/lodash/wiki/FP-Guide" target="_blank" rel="external">https://github.com/lodash/lodash/wiki/FP-Guide</a><br>什么是Lodash/fp模块：<a href="http://www.cnblogs.com/legendlee/p/5601524.html" target="_blank" rel="external">http://www.cnblogs.com/legendlee/p/5601524.html</a><br>Webpack按需打包lodash：<a href="http://www.tuicool.com/articles/niyeMrN" target="_blank" rel="external">http://www.tuicool.com/articles/niyeMrN</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Lodash目前非常流行的JavaScript的工具集合框架，被前端开发者广泛地使用，下面是一些平常开发过程中常用的函数。&lt;/p&gt;
&lt;p&gt;在介绍函数前，对lodash函数名应有如下的了解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;含sorted的方法接受有序数组&lt;/li&gt;
&lt;li&gt;同名含
    
    </summary>
    
    
      <category term="lodash" scheme="http://www.huzerui.com/tags/lodash/"/>
    
  </entry>
  
  <entry>
    <title>Gulp前端自动化工具笔记</title>
    <link href="http://www.huzerui.com/2016/11/07/gulp-learning-note/"/>
    <id>http://www.huzerui.com/2016/11/07/gulp-learning-note/</id>
    <published>2016-11-07T13:42:28.000Z</published>
    <updated>2017-04-29T07:02:21.907Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://huzerui.com/blog/img/post/2016-11-7-gulp-poster.jpg" alt="gulp"><br>某个深夜独自在房间深造，在不断键盘敲击的“Alt+Tab”和“F5”许久，我开始疲惫了，于是从冰箱抡起一杯可乐。畅饮之余，去Google寻求仙人指路，仙人找到了nodejs为我指点了迷津，并递给我一杯可乐和吸管，原来“她”就在这里，她的名字叫“Gulp”。</p>
<p>她虽然只是一杯插着吸管的饮料，可却能在烈日炎炎的夏天舒缓你焦灼的身心，在寒冷的冬天给你雪中送炭似的温暖，给你不一样的编码体验。</p>
<h1 id="拾起一杯Gulp"><a href="#拾起一杯Gulp" class="headerlink" title="拾起一杯Gulp"></a>拾起一杯Gulp</h1><p>gulpjs是一个前端构建工具，API简单，基于<strong>任务流</strong>，无需像Grunt复杂的配置。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在安装了node.js的基础上使用命令行或git即可安装。<br>全局安装：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --global gulp</div></pre></td></tr></table></figure></p>
<p>作为项目的<strong>开发依赖安装（-dev）</strong>，如果作为<strong>项目依赖，则只需（–save）</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev gulp</div></pre></td></tr></table></figure></p>
<h2 id="根目录创建gulpfile-js"><a href="#根目录创建gulpfile-js" class="headerlink" title="根目录创建gulpfile.js"></a>根目录创建gulpfile.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 将你的默认的任务代码放在这</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>如果省略了task参数，则gulp === gulp default<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp [task]?    <span class="comment">//  []中存放参数，？参考js正则，代表可有可无</span></div></pre></td></tr></table></figure></p>
<h1 id="畅饮Gulp"><a href="#畅饮Gulp" class="headerlink" title="畅饮Gulp"></a>畅饮Gulp</h1><p>在了解的Gulp的一些插件和基本使用方法之后，我开始构建自己的gulpfile.js，这个流程可以实现如下功能。</p>
<ul>
<li>实时监听文件的变化，一旦保存浏览器自动刷新。</li>
<li>自动编译scss文件</li>
<li>合并样式文件、脚本文件</li>
<li>压缩样式文件、脚本文件、图片</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*============================引入插件===============================*/</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> plugins = <span class="built_in">require</span>(<span class="string">'gulp-load-plugins'</span>)(&#123;</div><div class="line">	<span class="attr">rename</span>: &#123;</div><div class="line">		<span class="string">'gulp-ruby-sass'</span>: <span class="string">'sass'</span>,</div><div class="line">		<span class="string">'gulp-clean-css'</span>: <span class="string">'cleancss'</span></div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> browserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>).create();</div><div class="line"><span class="keyword">var</span> reload = browserSync.reload;</div><div class="line"></div><div class="line"><span class="comment">/*=============================发布任务==============================*/</span></div><div class="line">gulp.task(<span class="string">'html'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> gulp.src(<span class="string">'src/*.html'</span>)</div><div class="line">		.pipe(gulp.dest(<span class="string">'dist/'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'css'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// var cssFilter = plugins.filter(['src/**/*.css', '!src/css/vendor'], &#123;restore: true&#125;);</span></div><div class="line">	<span class="keyword">return</span> gulp.src(<span class="string">'src/css/**/*.css'</span>)</div><div class="line">		.pipe(plugins.cleancss())</div><div class="line">		.pipe(gulp.dest(<span class="string">'dist/css/'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'js'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// var jsFilter = plugins.filter(['src/**/*.js', '!src/js/vendor'], &#123;restore: true&#125;);</span></div><div class="line">	<span class="keyword">return</span> gulp.src(<span class="string">'src/**/*.js'</span>)</div><div class="line">		.pipe(plugins.uglify())</div><div class="line">		.pipe(gulp.dest(<span class="string">'dist/'</span>));</div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'img'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	gulp.src(<span class="string">'src/img/*'</span>)</div><div class="line">		.pipe(plugins.imagemin())</div><div class="line">		.pipe(gulp.dest(<span class="string">'dist/img'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'dist'</span>,[<span class="string">'html'</span>, <span class="string">'css'</span>, <span class="string">'js'</span> , <span class="string">'img'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> gulp.src([<span class="string">'src/res'</span>, <span class="string">'src/mocks'</span>])</div><div class="line">		.pipe(gulp.dest(<span class="string">'dist/'</span>));</div><div class="line"></div><div class="line">&#125;);</div><div class="line"><span class="comment">/*=============================合并任务==============================*/</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'bundle'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> vendor = &#123;</div><div class="line">		<span class="attr">css</span>: [<span class="string">'src/css/vendor/jquery.fullpage.css'</span>],</div><div class="line">		<span class="attr">js</span>: [<span class="string">'src/js/vendor/jquery.js'</span>,<span class="string">'src/js/vendor/jquery.fullpage.js'</span>]</div><div class="line">	&#125;;</div><div class="line">	<span class="comment">// 合并库css</span></div><div class="line">	gulp.src(vendor.css)</div><div class="line">		.pipe(plugins.concat(<span class="string">'bundle.css'</span>))</div><div class="line">		.pipe(gulp.dest(<span class="string">'src/css/vendor/'</span>));</div><div class="line"></div><div class="line">	<span class="comment">// 合并库js</span></div><div class="line">	gulp.src(vendor.js)</div><div class="line">		.pipe(plugins.concat(<span class="string">'bundle.js'</span>))</div><div class="line">		.pipe(gulp.dest(<span class="string">'src/js/vendor/'</span>));</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/*=============================服务器任务==============================*/</span></div><div class="line"></div><div class="line"><span class="comment">// 静态服务器 + 监听 scss/html 文件</span></div><div class="line">gulp.task(<span class="string">'server'</span>, [<span class="string">'sass'</span>,<span class="string">'bundle'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    browserSync.init(&#123;</div><div class="line">        <span class="attr">server</span>: <span class="string">'./src'</span></div><div class="line">    &#125;);</div><div class="line">    gulp.watch(<span class="string">'src/scss/**/*.scss'</span>, [<span class="string">'sass'</span>]);</div><div class="line">    gulp.watch(<span class="string">'src/**/*.html'</span>, [<span class="string">'html'</span>]).on(<span class="string">'change'</span>, reload);</div><div class="line">    gulp.watch(<span class="string">'src/js/**/*.js'</span>, [<span class="string">'js'</span>]).on(<span class="string">'change'</span>, reload);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/*=============================编译任务==============================*/</span></div><div class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// 编译库样式文件</span></div><div class="line">	plugins.sass(<span class="string">'src/scss/vendor/*.scss'</span>,&#123;<span class="attr">sourcemap</span>: <span class="literal">true</span>&#125;)</div><div class="line">    	.on(<span class="string">'error'</span>, plugins.sass.logError)</div><div class="line">    	.pipe(plugins.sourcemaps.write())</div><div class="line">        .pipe(gulp.dest(<span class="string">'src/css/vendor/'</span>))</div><div class="line">        .pipe(reload(&#123;<span class="attr">stream</span>: <span class="literal">true</span>&#125;));</div><div class="line">    <span class="comment">// 编译项目样式文件    </span></div><div class="line">    plugins.sass(<span class="string">'src/scss/main.scss'</span>,&#123;<span class="attr">sourcemap</span>: <span class="literal">true</span>&#125;)</div><div class="line">    	.on(<span class="string">'error'</span>, plugins.sass.logError)</div><div class="line">    	.pipe(plugins.sourcemaps.write())</div><div class="line">        .pipe(gulp.dest(<span class="string">'src/css/'</span>))</div><div class="line">        .pipe(reload(&#123;<span class="attr">stream</span>: <span class="literal">true</span>&#125;));</div><div class="line">    <span class="keyword">return</span> gulp;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/*=============================默认任务==============================*/</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'dist'</span>]);</div></pre></td></tr></table></figure>
<h2 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h2><p><strong>browserSync：</strong>浏览器实时相应文件更改并进行重新加载<br><strong>gulp-load-plugins：</strong>gulp插件加载工具，可对gulp插件进行重命名。当使用插件过多时可以有效管理和组织插件。<br><strong>gulp-ruby-sass：</strong> sass编译工具，同时生成sourcemap方便调试<br><strong>gulp-clean-css：</strong> 压缩css工具<br><strong>gulp-uglify：</strong> 压缩js工具<br><strong>gulp-concat:</strong>css、js合并工具<br><strong>gulp-imagemin：</strong> 图片压缩工具</p>
<h2 id="流程说明"><a href="#流程说明" class="headerlink" title="流程说明"></a>流程说明</h2><ul>
<li>在项目开发阶段，只存在src目录，所有开发均在src目录进行，直到项目开发完成，运行gulp命令则生成dist发布目录。</li>
<li>项目开发过程中执行gulp server命令，即可实施监听文件变动从而实现浏览器自动刷新。</li>
</ul>
<p><strong>gulp server运行时，一旦文件重新保存,则触发以下任务：</strong></p>
<ul>
<li>scss-vendor文件夹中的样式文件会被编译并打包成bundle.css并输出到css-vendor</li>
<li>js-vendor中的库文件会被打包成bundle.js并输出到js-vendor</li>
<li>scss目录下同级的scss文件将被合并到main.scss文件中并被编译成main.css打包到css目录下面。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">-root</div><div class="line">	-dist <span class="comment">//发布目录，执行gulp默认任务生成</span></div><div class="line">	-src</div><div class="line">		-css</div><div class="line">			vendor</div><div class="line">				...</div><div class="line">			main.css   </div><div class="line">		-img </div><div class="line">		-js </div><div class="line">			vendor</div><div class="line">			main.js</div><div class="line">		-scss </div><div class="line">			vendor</div><div class="line">				...</div><div class="line">			main.scss </div><div class="line">			normalize.scss</div><div class="line">		index.html</div><div class="line">		...</div></pre></td></tr></table></figure>
<h1 id="品味Gulp"><a href="#品味Gulp" class="headerlink" title="品味Gulp"></a>品味Gulp</h1><h2 id="Gulp-API"><a href="#Gulp-API" class="headerlink" title="Gulp-API"></a>Gulp-API</h2><p>以下为API介绍，[]中的参数为可选，options参数不太常用，故不作详细介绍。</p>
<h3 id="gulp-task-name-deps-fn"><a href="#gulp-task-name-deps-fn" class="headerlink" title="gulp.task(name[, deps], fn)"></a>gulp.task(name[, deps], fn)</h3><p>定义一个使用 Orchestrator 实现的任务（task）。<br>name: 任务的名字，如果你需要在命令行中运行你的某些任务，那么，请不要在名字中使用空格。<br>deps: 一个包含任务列表的数组，这些任务会在你当前任务运行之前完成。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'somename'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 做一些事</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="gulp-src-globs-options"><a href="#gulp-src-globs-options" class="headerlink" title="gulp.src(globs[, options])"></a>gulp.src(globs[, options])</h3><p>输出（Emits）符合所提供的匹配模式（glob）或者匹配模式的数组（array of globs）的文件。 将返回一个 Vinyl files 的 stream 它可以被 piped 到别的插件中。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gulp.src(<span class="string">'client/templates/*.jade'</span>)</div><div class="line">  .pipe(jade())</div><div class="line">  .pipe(minify())</div><div class="line">  .pipe(gulp.dest(<span class="string">'build/minified_templates'</span>));</div></pre></td></tr></table></figure></p>
<h3 id="gulp-dest-path-options"><a href="#gulp-dest-path-options" class="headerlink" title="gulp.dest(path[, options])"></a>gulp.dest(path[, options])</h3><p>能被 pipe 进来，并且将会写文件。并且重新输出（emits）所有数据，因此你可以将它 pipe 到多个文件夹。如果某文件夹不存在，将会自动创建它。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.src(<span class="string">'./client/templates/*.jade'</span>)</div><div class="line">  .pipe(jade())</div><div class="line">  .pipe(gulp.dest(<span class="string">'./build/templates'</span>))</div><div class="line">  .pipe(minify())</div><div class="line">  .pipe(gulp.dest(<span class="string">'./build/minified_templates'</span>));</div></pre></td></tr></table></figure></p>
<h3 id="gulp-watch-glob-opts-cb"><a href="#gulp-watch-glob-opts-cb" class="headerlink" title="gulp.watch(glob[, opts, cb])"></a>gulp.watch(glob[, opts, cb])</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.watch(<span class="string">'js/**/*.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'File '</span> + event.path + <span class="string">' was '</span> + event.type + <span class="string">', running tasks...'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>怎么少了gulp.pipe()？<br>生活中我们每天都在搞事情，事情等同于任务，但这个任务中不同的环节是有依赖关系的，比如完成一幅画涂颜料需要在绘画完成后才能开始，于是gulp.pipe()相当于提供一个管道，让我们将这些环节连接起来，最终完成一个完整的任务。</p>
<h2 id="关于glob参数匹配规则"><a href="#关于glob参数匹配规则" class="headerlink" title="关于glob参数匹配规则"></a>关于glob参数匹配规则</h2><p>发起一项任务需要寻找文件对象，这就需要一些规则用于匹配文件。</p>
<h3 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">*  匹配文件路径中的<span class="number">0</span>个或多个字符，但不会匹配路径分隔符，除非路径分隔符出现在末尾</div><div class="line">** 匹配路径中的<span class="number">0</span>个或多个目录及其子目录,需要单独出现，即它左右不能有其他东西了。如果出现在末尾，也能匹配文件。</div><div class="line">?  匹配文件路径中的一个字符(不会匹配路径分隔符)</div><div class="line">[...] 匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为^或!时，则表示不匹配方括号中出现的其他字符中的任意一个，类似js正则表达式中的用法</div><div class="line">!(pattern|pattern|pattern) 匹配任何与括号中给定的任一模式都不匹配的</div><div class="line">?(pattern|pattern|pattern) 匹配括号中给定的任一模式<span class="number">0</span>次或<span class="number">1</span>次，类似于js正则中的(pattern|pattern|pattern)?</div><div class="line">+(pattern|pattern|pattern) 匹配括号中给定的任一模式至少<span class="number">1</span>次，类似于js正则中的(pattern|pattern|pattern)+</div><div class="line">*(pattern|pattern|pattern) 匹配括号中给定的任一模式<span class="number">0</span>次或多次，类似于js正则中的(pattern|pattern|pattern)*</div><div class="line">@(pattern|pattern|pattern) 匹配括号中给定的任一模式<span class="number">1</span>次，类似于js正则中的(pattern|pattern|pattern)</div></pre></td></tr></table></figure>
<p><strong>示例：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">* 能匹配 a.js,x.y,abc,abc/,但不能匹配a/b.js</div><div class="line">*.* 能匹配 a.js,style.css,a.b,x.y</div><div class="line">*<span class="comment">/*/*.js 能匹配 a/b/c.js,x/y/z.js,不能匹配a/b.js,a/b/c/d.js</span></div><div class="line">** 能匹配 abc,a/b.js,a/b/c.js,x/y/z,x/y/z/a.b,能用来匹配所有的目录和文件</div><div class="line">**/*.js 能匹配 foo.js,a/foo.js,a/b/foo.js,a/b/c/foo.js</div><div class="line">a<span class="comment">/**/</span>z 能匹配 a/z,a/b/z,a/b/c/z,a/d/g/h/j/k/z</div><div class="line">a<span class="comment">/**b/z 能匹配 a/b/z,a/sb/z,但不能匹配a/x/sb/z,因为只有**单独出现才能匹配多级目录</span></div><div class="line">?.js 能匹配 a.js,b.js,c.js</div><div class="line">a?? 能匹配 a.b,abc,但不能匹配ab/,因为它不会匹配路径分隔符</div><div class="line">[xyz].js 只能匹配 x.js,y.js,z.js,不会匹配xy.js,xyz.js等,整个中括号只代表一个字符</div><div class="line">[^xyz].js 能匹配 a.js,b.js,c.js等,不能匹配x.js,y.js,z.js</div></pre></td></tr></table></figure></p>
<p>由上面可以看出gulp匹配的规则和正则大致相同。有一点要注意的是<strong>**匹配符号会深入所有的子目录里面</strong>，而出现路径分割符只会进入<strong>一级子目录</strong>中寻找匹配文件。</p>
<h3 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h3><p>匹配模式分为：<strong>单一匹配、多种匹配、展开匹配</strong></p>
<h4 id="单一匹配"><a href="#单一匹配" class="headerlink" title="单一匹配"></a>单一匹配</h4><p>精确匹配：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.src(<span class="string">"./js/main.js"</span>)</div></pre></td></tr></table></figure></p>
<p>模糊匹配：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.src(<span class="string">"**/*.js"</span>)</div></pre></td></tr></table></figure></p>
<h4 id="多种匹配"><a href="#多种匹配" class="headerlink" title="多种匹配"></a>多种匹配</h4><p>当有多种匹配模式(多个单一匹配)时可以使用数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.src([<span class="string">'js/*.js'</span>,<span class="string">'css/*.css'</span>,<span class="string">'*.html'</span>])</div></pre></td></tr></table></figure></p>
<p>使用数组的方式还有一个好处就是可以很方便的使用排除模式，在数组中的单个匹配模式前加上!即是排除模式，它会在匹配的结果中排除这个匹配，要注意一点的是不能在数组中的第一个元素中使用排除模式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gulp.src([*.js,<span class="string">'!b*.js'</span>]) <span class="comment">//匹配所有js文件，但排除掉以b开头的js文件</span></div><div class="line">gulp.src([<span class="string">'!b*.js'</span>,*.js]) <span class="comment">//不会排除任何文件，因为排除模式不能出现在数组的第一个元素中</span></div></pre></td></tr></table></figure></p>
<h4 id="展开匹配"><a href="#展开匹配" class="headerlink" title="展开匹配"></a>展开匹配</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a&#123;b,c&#125;d 会展开为 abd,acd</div><div class="line">a&#123;b,&#125;c 会展开为 abc,ac</div><div class="line">a&#123;<span class="number">0.</span><span class="number">.3</span>&#125;d 会展开为 a0d,a1d,a2d,a3d</div><div class="line">a&#123;b,c&#123;d,e&#125;f&#125;g 会展开为 abg,acdfg,acefg</div><div class="line">a&#123;b,c&#125;d&#123;e,f&#125;g 会展开为 abdeg,acdeg,abdeg,abdfg</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://huzerui.com/blog/img/post/2016-11-7-gulp-poster.jpg&quot; alt=&quot;gulp&quot;&gt;&lt;br&gt;某个深夜独自在房间深造，在不断键盘敲击的“Alt+Tab”和“F5”许久，我开始疲惫了，于是从冰箱抡起一
    
    </summary>
    
      <category term="前端" scheme="http://www.huzerui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="gulp" scheme="http://www.huzerui.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>Javascript开启浏览器全屏模式</title>
    <link href="http://www.huzerui.com/2016/11/04/let-your-browser-open-fullscreen-mode/"/>
    <id>http://www.huzerui.com/2016/11/04/let-your-browser-open-fullscreen-mode/</id>
    <published>2016-11-04T15:38:01.000Z</published>
    <updated>2017-04-29T07:02:21.907Z</updated>
    
    <content type="html"><![CDATA[<p>通常在某些情况下，我们需要让浏览器开启全屏模式，以便获得更好的视觉体验，先看下全屏模式简单的几个API。</p>
<h1 id="浏览器默认绑定"><a href="#浏览器默认绑定" class="headerlink" title="浏览器默认绑定"></a>浏览器默认绑定</h1><p>非全屏模式下， document的F11按键绑定开启全屏模式<br>全屏模式下， document的esc和F11 按键绑定关闭全屏模式</p>
<h1 id="屏幕全屏模式改变事件"><a href="#屏幕全屏模式改变事件" class="headerlink" title="屏幕全屏模式改变事件"></a>屏幕全屏模式改变事件</h1><p>当成功进入全屏模式后， document会收到一个fullscreenchange 事件。 当退出全屏状态后， document又会收到fullscreenchange 事件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> screenChange = <span class="string">'webkitfullscreenchange'</span> || <span class="string">'mozfullscreenchange'</span> || <span class="string">'fullscreenchange'</span></div></pre></td></tr></table></figure></p>
<h1 id="判断当前是否处于全屏状态"><a href="#判断当前是否处于全屏状态" class="headerlink" title="判断当前是否处于全屏状态"></a>判断当前是否处于全屏状态</h1><p><strong>非标准(避免使用)：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isFullScreen = <span class="built_in">document</span>.fullScreen || <span class="built_in">document</span>.mozFullScreen || <span class="built_in">document</span>.webkitIsFullScreen;</div></pre></td></tr></table></figure></p>
<p><strong>标准：</strong><br>fullscreenElement 属性会告诉你当前全屏显示的 element。 如果该值为非空，则document进入了全屏模式。如果为空则不在全屏模式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isFullScreen = <span class="built_in">document</span>.fullscreenElement || <span class="built_in">document</span>.mozFullScreenElement ||<span class="built_in">document</span>.webkitFullscreenElement</div></pre></td></tr></table></figure></p>
<h1 id="判断是否可以进入请求全屏状态"><a href="#判断是否可以进入请求全屏状态" class="headerlink" title="判断是否可以进入请求全屏状态"></a>判断是否可以进入请求全屏状态</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isFullScreenAvailable = <span class="built_in">document</span>.fullScreenEnabled || <span class="built_in">document</span>.mozFullScreenEnabled || <span class="built_in">document</span>.webkitFullscreenEnabled;</div></pre></td></tr></table></figure>
<h1 id="开启全屏模式"><a href="#开启全屏模式" class="headerlink" title="开启全屏模式"></a>开启全屏模式</h1><p>参数：element为想要全屏展示的元素比如video，如果想要浏览器全屏展示，则传入document.documentElement即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">launchFullScreen</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (element.requestFullscreen) &#123;</div><div class="line">        element.requestFullscreen();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.mozRequestFullScreen) &#123;</div><div class="line">        element.mozRequestFullScreen();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.webkitRequestFullscreen) &#123;</div><div class="line">        element.webkitRequestFullscreen();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.msRequestFullscreen) &#123;</div><div class="line">        element.msRequestFullscreen();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意: <strong>requestFullscreen是规范的书写模式（ s是小写）</strong>， 但在Gecko内核中仍使用带前缀的大写模式mozRequestFullScreen。</p>
<h1 id="关闭全屏模式"><a href="#关闭全屏模式" class="headerlink" title="关闭全屏模式"></a>关闭全屏模式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">exitFullscreen</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.exitFullscreen) &#123;</div><div class="line">        <span class="built_in">document</span>.exitFullscreen();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.mozCancelFullScreen) &#123;</div><div class="line">        <span class="built_in">document</span>.mozCancelFullScreen();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.webkitExitFullscreen) &#123;</div><div class="line">        <span class="built_in">document</span>.webkitExitFullscreen();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="全屏模式只能由手势触发"><a href="#全屏模式只能由手势触发" class="headerlink" title="全屏模式只能由手势触发"></a>全屏模式只能由手势触发</h1><p>了解API后，假如我们监听window.onload事件执行launchFullScreen方法，Chrome浏览器会提示“开启全屏模式API只能由用户手势触发”。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"Failed to execute 'requestFullScreen' on 'Element': API can only be initiated by a user gesture."</span></div></pre></td></tr></table></figure></p>
<p>原因是浏览器采用安全的机制， 将这种强制全屏模式意为“恶意行为”， <strong>一切非用户主观意愿带来的变化都是不允许的</strong>。</p>
<p>因此如果你的应用有全屏需求，有两种方案。<br>1.页面初始化给用户一个“F11开启全屏” 的提示， 并且在延迟几秒之后消失。<br>2.页面设置一个全屏按钮，单击全屏按钮进入全屏模式，并且隐藏按钮（视觉效果最佳）。</p>
<p>对于第二种方案，需要监听键盘事件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"keydown"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> currKey = <span class="number">0</span></div><div class="line">    <span class="comment">//在FireFox或Opera中，隐藏的变量e是存在的，那么e||event返回e，如果在IE中，隐藏变量e是不存在，则返回event。</span></div><div class="line">    <span class="keyword">var</span> e = e || event;  </div><div class="line">    <span class="comment">//IE中，只有keyCode属性，而FireFox中有which和charCode属性，Opera中有keyCode和which属性</span></div><div class="line">    <span class="keyword">var</span> currKey = e.keyCode || e.which || e.charCode;</div><div class="line">    <span class="keyword">if</span> (currKey == <span class="number">112</span>) &#123;</div><div class="line">        launchFullScreen(<span class="built_in">document</span>.documentElement);</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<p>具备了兼容各种浏览器按键模式的监听，但不知道<strong>keycode</strong>肿么办，112是哪个键？</p>
<h2 id="字母和数字键的键码值-keyCode"><a href="#字母和数字键的键码值-keyCode" class="headerlink" title="字母和数字键的键码值(keyCode)"></a>字母和数字键的键码值(keyCode)</h2><table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th>键码</th>
<th>按键</th>
<th>键码</th>
<th>按键</th>
<th>键码</th>
<th>按键</th>
<th>键码</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A</td>
<td>65</td>
<td>J</td>
<td>74</td>
<td>S</td>
<td>83</td>
<td>1</td>
<td>49</td>
</tr>
<tr>
<td style="text-align:center">B</td>
<td>66</td>
<td>K</td>
<td>75</td>
<td>T</td>
<td>84</td>
<td>2</td>
<td>50</td>
</tr>
<tr>
<td style="text-align:center">C</td>
<td>67</td>
<td>L</td>
<td>76</td>
<td>U</td>
<td>85</td>
<td>3</td>
<td>51</td>
</tr>
<tr>
<td style="text-align:center">D</td>
<td>68</td>
<td>M</td>
<td>77</td>
<td>V</td>
<td>86</td>
<td>4</td>
<td>52</td>
</tr>
<tr>
<td style="text-align:center">E</td>
<td>69</td>
<td>N</td>
<td>78</td>
<td>W</td>
<td>87</td>
<td>5</td>
<td>53</td>
</tr>
<tr>
<td style="text-align:center">F</td>
<td>70</td>
<td>O</td>
<td>79</td>
<td>X</td>
<td>88</td>
<td>6</td>
<td>54</td>
</tr>
<tr>
<td style="text-align:center">G</td>
<td>71</td>
<td>P</td>
<td>80</td>
<td>Y</td>
<td>89</td>
<td>7</td>
<td>55</td>
</tr>
<tr>
<td style="text-align:center">H</td>
<td>72</td>
<td>Q</td>
<td>81</td>
<td>Z</td>
<td>90</td>
<td>8</td>
<td>56</td>
</tr>
<tr>
<td style="text-align:center">I</td>
<td>73</td>
<td>R</td>
<td>82</td>
<td>0</td>
<td>48</td>
<td>9</td>
<td>57</td>
</tr>
</tbody>
</table>
<h2 id="数字键盘上的键的键码值-keyCode"><a href="#数字键盘上的键的键码值-keyCode" class="headerlink" title="数字键盘上的键的键码值(keyCode)"></a>数字键盘上的键的键码值(keyCode)</h2><table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th>键码</th>
<th>按键</th>
<th>键码</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td>96</td>
<td>8</td>
<td>104</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td>97</td>
<td>9</td>
<td>105</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td>98</td>
<td>*</td>
<td>106</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td>99</td>
<td>+</td>
<td>107</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td>100</td>
<td>Enter</td>
<td>108</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td>101</td>
<td>-</td>
<td>109</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td>102</td>
<td>.</td>
<td>110</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td>103</td>
<td>/</td>
<td>111</td>
</tr>
</tbody>
</table>
<h2 id="功能键键码值-keyCode"><a href="#功能键键码值-keyCode" class="headerlink" title="功能键键码值(keyCode)"></a>功能键键码值(keyCode)</h2><table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th>键码</th>
<th>按键</th>
<th>键码</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">F1</td>
<td>112</td>
<td>F7</td>
<td>118</td>
</tr>
<tr>
<td style="text-align:center">F2</td>
<td>113</td>
<td>F8</td>
<td>119</td>
</tr>
<tr>
<td style="text-align:center">F3</td>
<td>114</td>
<td>F9</td>
<td>120</td>
</tr>
<tr>
<td style="text-align:center">F4</td>
<td>115</td>
<td>F10</td>
<td>121</td>
</tr>
<tr>
<td style="text-align:center">F5</td>
<td>116</td>
<td>F11</td>
<td>122</td>
</tr>
<tr>
<td style="text-align:center">F6</td>
<td>117</td>
<td>F12</td>
<td>123</td>
</tr>
</tbody>
</table>
<h2 id="控制键键码值-keyCode"><a href="#控制键键码值-keyCode" class="headerlink" title="控制键键码值(keyCode)"></a>控制键键码值(keyCode)</h2><table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th>键码</th>
<th>按键</th>
<th>键码</th>
<th>按键</th>
<th>键码</th>
<th>按键</th>
<th>键码</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">BackSpace</td>
<td>8</td>
<td>Esc</td>
<td>27</td>
<td>Right Arrow</td>
<td>39</td>
<td>-_</td>
<td>189</td>
</tr>
<tr>
<td style="text-align:center">Tab</td>
<td>9</td>
<td>Spacebar</td>
<td>32</td>
<td>Dw Arrow</td>
<td>40</td>
<td>.&gt;</td>
<td>190</td>
</tr>
<tr>
<td style="text-align:center">Clear</td>
<td>12</td>
<td>Page Up</td>
<td>33</td>
<td>Insert</td>
<td>45</td>
<td>/?</td>
<td>191</td>
</tr>
<tr>
<td style="text-align:center">Enter</td>
<td>13</td>
<td>Page Down</td>
<td>34</td>
<td>Delete</td>
<td>46</td>
<td>`~</td>
<td>192</td>
</tr>
<tr>
<td style="text-align:center">Shift</td>
<td>16</td>
<td>End</td>
<td>35</td>
<td>Num Lock</td>
<td>144</td>
<td>[{</td>
<td>219</td>
</tr>
<tr>
<td style="text-align:center">Control</td>
<td>17</td>
<td>Home</td>
<td>36</td>
<td>;:</td>
<td>186</td>
<td>\</td>
<td>220</td>
</tr>
<tr>
<td style="text-align:center">Alt</td>
<td>18</td>
<td>Left Arrow</td>
<td>37</td>
<td>=+</td>
<td>187</td>
<td>]}</td>
<td>221</td>
</tr>
<tr>
<td style="text-align:center">Cape Lock</td>
<td>20</td>
<td>Up Arrow</td>
<td>38</td>
<td>,&lt;</td>
<td>188</td>
<td>‘“</td>
<td>222</td>
</tr>
</tbody>
</table>
<h1 id="其他非标准化的方法"><a href="#其他非标准化的方法" class="headerlink" title="其他非标准化的方法"></a>其他非标准化的方法</h1><p><strong>非标准化的方法指的是进入草案前浏览器实现的一些方法。有的目前仍保留，有的已废除，避免使用。</strong><br><del>window.fullScreen(Firefox)</del><br><del>HTMLMediaElement.webkitDisplayingFullscreen</del><br><del>HTMLMediaElement.webkitEnterFullscreen</del><br><del>HTMLMediaElement.webkitExitFullscreen</del><br><del>HTMLMediaElement.webkitSupportsFullscreen</del></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常在某些情况下，我们需要让浏览器开启全屏模式，以便获得更好的视觉体验，先看下全屏模式简单的几个API。&lt;/p&gt;
&lt;h1 id=&quot;浏览器默认绑定&quot;&gt;&lt;a href=&quot;#浏览器默认绑定&quot; class=&quot;headerlink&quot; title=&quot;浏览器默认绑定&quot;&gt;&lt;/a&gt;浏览器默认
    
    </summary>
    
      <category term="前端" scheme="http://www.huzerui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://www.huzerui.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>HTML5(Audio)移动音乐播放器</title>
    <link href="http://www.huzerui.com/2016/10/30/how-to-make-a-html5-player/"/>
    <id>http://www.huzerui.com/2016/10/30/how-to-make-a-html5-player/</id>
    <published>2016-10-30T00:38:01.000Z</published>
    <updated>2017-05-18T11:51:30.412Z</updated>
    
    <content type="html"><![CDATA[<p>“咳咳咳..在看正文之前，如果客官有兴趣可以轻点播放按钮聆听一下我的<strong>第一首吉他原创歌曲</strong>”。——作于大三下学期</p>
<p><audio style="width: 100%" src="http://qiniu.huzerui.com/audio/guita-september.mp3" controls></audio><br>“怎么感觉整个人都不好了…还有呜呜呜的声音”</p>
<p>“那时正值寒冬，于学校宿舍顶楼录制，周围一片漆黑，忽一阵冷风袭来，但对我而言那是美丽的协奏”</p>
<p>“什么鬼..！”</p>
<p>“好吧…那听听这首吧，也许能帮到客官您，这是我的<strong>第二首原创歌曲</strong>”。——作于大四上学期</p>
<p><audio style="width: 100%" src="http://qiniu.huzerui.com/audio/guita-nightsky.mp3" controls></audio><br>“怎么比第一首调子还哀伤”？Are you kiding me？</p>
<p><strong>“蓝瘦，香菇，在这里。”</strong></p>
<p>好了，客观见笑了，为了真正治愈你，让我们回归正题吧！</p>
<p>这段时间公司一直在做一个PC的教育类单页应用，庞大复杂，涉及非常多H5的知识，音频就是其中的一部分。闲暇时写了一个移动音乐播放器，除了将之作为练手项目，对于音乐的喜爱也是促使自己想写个播放器的原因。</p>
<p>在线地址：请猛击<a href="http://alex1504.oschina.io/demo/player/" target="_blank" rel="external">这里</a><br>源码：请猛击<a href="https://git.oschina.net/alex1504/demo/tree/osc-pages/player?dir=1&amp;filepath=player&amp;oid=4c10643c235593569490e3da0d2ff7f613ece98e&amp;sha=ec2e4efea87ee25ee0818481a8cf1f5893c5947c" target="_blank" rel="external">这里</a></p>
<p>注意：使用PC浏览最好打开<strong>移动设备模式</strong>，使用移动设备浏览需要关闭无痕浏览模式（否则无法使用本地存储，一般浏览器都是默认不开启），项目需要在<strong>本地服务器</strong>或<strong>线上服务器</strong>运行，以file:///形式的地址打开是无法进行ajax请求的，从而无法看到音乐数据。<br><img src="http://huzerui.com/blog/img/post/2016-10-30-how-to-make-a-mobile-html5-player.jpg" alt="UI图"></p>
<h1 id="项目实现的功能及所用知识"><a href="#项目实现的功能及所用知识" class="headerlink" title="项目实现的功能及所用知识"></a>项目实现的功能及所用知识</h1><ul>
<li>播放器的基础操作，上一首，下一首(顺序播放、随机播放、单曲循环)，播放暂停，滑动时间轴的歌词定位</li>
<li>初始handlebar模板渲染音乐列表数据，下拉滚动加载音乐列表数据。</li>
<li>歌曲列表可添加喜爱音乐，于下次刷新时更新喜爱音乐列表，基于HTML5本地存储。</li>
<li>布局采用rem布局，自适应移动端手机设备。</li>
<li>iconfont在线图标应用的使用</li>
</ul>
<h1 id="项目目录文件结构"><a href="#项目目录文件结构" class="headerlink" title="项目目录文件结构"></a>项目目录文件结构</h1><ul>
<li>css：存放样式文件</li>
<li>lib： 存放公共脚本库</li>
<li>js： 存放项目脚本文件</li>
<li>img： 存放图片</li>
<li>fonts： 项目字体文件</li>
<li>res： 项目音乐资源</li>
<li>ui：项目ui文件（psd）</li>
</ul>
<h1 id="项目js文件结构"><a href="#项目js文件结构" class="headerlink" title="项目js文件结构"></a>项目js文件结构</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ============================配置变量================================</span></div><div class="line"><span class="keyword">var</span> rootPath = <span class="built_in">window</span>.location.href.replace(<span class="regexp">/\/\w+\.\w+/</span>, <span class="string">"/"</span>);</div><div class="line"><span class="keyword">var</span> Settings = &#123;</div><div class="line">    <span class="attr">playmode</span>: <span class="number">0</span>, <span class="comment">//0列表循环，1随机，2为单曲循环</span></div><div class="line">    volume: <span class="number">0.5</span>, <span class="comment">//音量</span></div><div class="line">    initNum: <span class="number">10</span>, <span class="comment">//列表初始化歌曲数</span></div><div class="line">    reqNum: <span class="number">10</span> <span class="comment">//后续请求歌曲数</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// ============================工具函数================================</span></div><div class="line"><span class="keyword">var</span> Util = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;)()</div><div class="line"><span class="comment">// ============================Dom选择器================================</span></div><div class="line"><span class="keyword">var</span> Dom = &#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ============================全局变量================================</span></div><div class="line"><span class="keyword">var</span> winH = $(<span class="built_in">window</span>).height();</div><div class="line"></div><div class="line"><span class="keyword">var</span> songNum = <span class="number">0</span>; <span class="comment">//当前列表歌曲数目</span></div><div class="line"><span class="keyword">var</span> lrcHighIndex = <span class="number">0</span>; <span class="comment">// 歌词高亮索引</span></div><div class="line"><span class="keyword">var</span> lrcMoveIndex = <span class="number">0</span>; <span class="comment">// 歌词移动单位索引</span></div><div class="line"><span class="keyword">var</span> moveDis = <span class="number">0</span>; <span class="comment">// 单句歌词每次移动距离</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> duration = <span class="number">0</span>; <span class="comment">// 当前歌曲的时间</span></div><div class="line"><span class="keyword">var</span> index = <span class="number">0</span>; <span class="comment">//当前播放歌曲的索引</span></div><div class="line"><span class="keyword">var</span> songInfo = <span class="literal">null</span>; <span class="comment">// 当前歌曲信息</span></div><div class="line"><span class="keyword">var</span> songModelUI = <span class="literal">null</span>; <span class="comment">// 当前歌曲UI模型</span></div><div class="line"><span class="keyword">var</span> timeArr = []; <span class="comment">//当前歌曲时间数组</span></div><div class="line"><span class="keyword">var</span> formatTimeArr = []; <span class="comment">//当前歌曲时间数组(格式化为秒数)</span></div><div class="line"></div><div class="line"><span class="comment">// ============================入口函数================================</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    initUIFrame();</div><div class="line">    <span class="keyword">var</span> initModel = PlayerModel();</div><div class="line"></div><div class="line">    <span class="keyword">var</span> songListUI = ModelUIFrame(Dom.songListContainer);</div><div class="line">    <span class="keyword">var</span> lsongListUI = ModelUIFrame(Dom.lSongListContainer);</div><div class="line">    initModel.getSongList(<span class="string">"data/data.json"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">        <span class="comment">// 生成所有歌曲列表</span></div><div class="line">        songListUI.renderList(data, <span class="number">0</span>, <span class="literal">null</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            songListUI.updateList();</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">// 生成喜爱歌曲列表</span></div><div class="line">        initModel.getLoveSongArr(<span class="function"><span class="keyword">function</span>(<span class="params">lSongArr</span>) </span>&#123;</div><div class="line">            lsongListUI.renderList(data, <span class="number">1</span>, lSongArr);</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">// 添加动画</span></div><div class="line">        Util.addAnimationDelay(Dom.song);</div><div class="line">        <span class="comment">// 保存歌词数据</span></div><div class="line">        initModel.saveLyric(data);</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">    EventHandler();</div><div class="line">&#125;</div><div class="line"><span class="comment">// ============================初始化UI函数================================</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initUIFrame</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">// ============================实现数据交互方法================================</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PlayerModel</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="comment">// ============================模型动态UI模块================================</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ModelUIFrame</span>(<span class="params">container</span>) </span>&#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="comment">// ============================事件绑定模块================================</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">EventHandler</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="comment">// 调用入口函数</span></div><div class="line"> main();</div></pre></td></tr></table></figure>
<h1 id="功能点详解"><a href="#功能点详解" class="headerlink" title="功能点详解"></a>功能点详解</h1><h2 id="Handlebar-js初次渲染及滚动加载"><a href="#Handlebar-js初次渲染及滚动加载" class="headerlink" title="Handlebar.js初次渲染及滚动加载"></a>Handlebar.js初次渲染及滚动加载</h2><p>使用前端模板优点是把数据和结构分离出来，代码更清晰。但后来发现handlerbar.js似乎无法在js中示例模板对象，而html中的handlebar在初次进入页面便会被编译了，因此后续添加音乐还是采用传统的拼接字符串的方式，如果你有更优雅的动态加载方式，欢迎讨论交流。</p>
<p><strong>html:</strong> handlebars模板包含在script标签之中并且type类型为”text/x-handlebars-template”，在初始化页面的时候根据js获取数据植入后就渲染出相应的html。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"sListTpl"</span> <span class="attr">type</span>=<span class="string">"text/x-handlebars-template"</span>&gt;</span><span class="xml"></span></div><div class="line">&#123;&#123;#each this&#125;&#125;</div><div class="line">&#123;&#123;#isInitData this @index&#125;&#125;</div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"song btm-line"</span> <span class="attr">data-src</span>=<span class="string">&#123;&#123;songSrc&#125;&#125;</span> <span class="attr">data-index</span>=<span class="string">&#123;&#123;id&#125;&#125;</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"poster"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;&#123;poster.thumbnail&#125;&#125;</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"songinfo"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"lsongname"</span>&gt;</span>&#123;&#123;songName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">sub</span> <span class="attr">class</span>=<span class="string">"lsinger"</span>&gt;</span>&#123;&#123;singer&#125;&#125;<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loveflag"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon icon-love &#123;&#123;#if loveFlag&#125;&#125;active&#123;&#123;/if&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">&#123;&#123;/isInitData&#125;&#125;</div><div class="line">&#123;&#123;/each&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- END歌曲列表模块 --&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>js:</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderAllList</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> preTpl;</div><div class="line">    <span class="keyword">var</span> lsongArr = Util.getItem(<span class="string">'lsonglist'</span>) === <span class="literal">null</span> ? [] : <span class="built_in">JSON</span>.parse(Util.getItem(<span class="string">'lsonglist'</span>));</div><div class="line">    <span class="comment">// 生成列表</span></div><div class="line">    <span class="keyword">if</span> (!sListTpl) &#123;</div><div class="line">        <span class="comment">// 后续动态生成歌曲</span></div><div class="line">        <span class="keyword">var</span> tpl = <span class="string">""</span>;</div><div class="line">        <span class="keyword">var</span> songIndex = songNum;</div><div class="line">        $.each(data, <span class="function"><span class="keyword">function</span>(<span class="params">index, el</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (index &gt;= songIndex &amp;&amp; index &lt; songIndex + Settings.reqNum) &#123;</div><div class="line">                tpl += <span class="string">"&lt;li class='song btm-line' data-src='res/music/"</span> + songNum + <span class="string">".mp3' data-index='"</span> + songNum + <span class="string">"'&gt;&lt;div class='poster'&gt;&lt;img src='./img/poster/"</span> + songNum + <span class="string">"-thumbnail.jpg'&gt;&lt;/div&gt;&lt;div class='songinfo'&gt;&lt;h2 class='lsongname'&gt;"</span> + el.songName + <span class="string">"&lt;/h2&gt;&lt;sub class='lsinger'&gt;"</span> + el.singer + <span class="string">"&lt;/sub&gt;&lt;/div&gt;&lt;div class='loveflag'&gt;&lt;i class='icon icon-love '&gt;&lt;/i&gt;&lt;/div&gt;&lt;/li&gt;"</span>;</div><div class="line">                songNum++;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        $(container).append($(tpl));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 首次生成歌曲</span></div><div class="line">        preTpl = Handlebars.compile(sListTpl);</div><div class="line">        $(container).html(preTpl(data));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 更新喜爱图标</span></div><div class="line">    <span class="keyword">if</span> (lsongArr.length !== <span class="number">0</span>) &#123;</div><div class="line">        $.each(lsongArr, <span class="function"><span class="keyword">function</span>(<span class="params">index, val</span>) </span>&#123;</div><div class="line">            Dom.songListContainer.find(<span class="string">".song"</span>).eq(val).find(<span class="string">".icon-love"</span>).addClass(<span class="string">'active'</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="rem布局自适应方案"><a href="#rem布局自适应方案" class="headerlink" title="rem布局自适应方案"></a>rem布局自适应方案</h2><p>大体上指的是html根元素上定义一个字体大小，然后css样式定义时使用rem作为单位，包括margin、paddding、用于绝对定位的单位等等。然后js根据手机设备的屏幕大小，改变根字体的大小，这样整个页面也会跟着相应的缩小或放大。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 根据手机屏幕自适应字体大小（rem自适应方案）</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">rescale</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> docEle = <span class="built_in">document</span>.documentElement;</div><div class="line">    <span class="keyword">var</span> width = docEle.clientWidth || <span class="built_in">window</span>.innerWidth;</div><div class="line">    <span class="keyword">if</span> (width &gt; <span class="number">640</span> &amp;&amp; width !== <span class="number">768</span>) &#123;</div><div class="line">        docEle.style.fontSize = <span class="string">"100px"</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (width == <span class="number">320</span>) &#123;</div><div class="line">        <span class="comment">//iphone5</span></div><div class="line">        docEle.style.fontSize = <span class="string">"49px"</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (width == <span class="number">375</span>) &#123;</div><div class="line">        <span class="comment">//iphone6 </span></div><div class="line">        docEle.style.fontSize = <span class="string">"57px"</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (width == <span class="number">412</span>) &#123;</div><div class="line">        <span class="comment">// Nexus 5X</span></div><div class="line">        docEle.style.fontSize = <span class="string">"57px"</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (width == <span class="number">768</span>) &#123;</div><div class="line">        <span class="comment">//ipad </span></div><div class="line">        docEle.style.fontSize = <span class="string">"88px"</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        docEle.style.fontSize = <span class="built_in">Math</span>.round(width / <span class="number">640</span> * <span class="number">100</span>) + <span class="string">"px"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更多详解，请看先前一篇文章《移动端自适应布局解决方案——rem》，您可以猛击<a href="http://huzerui.com/blog/2016/06/16/mobile-rem/" target="_blank" rel="external">这里</a>跳转。</p>
<h2 id="关于歌词的同步方案实现"><a href="#关于歌词的同步方案实现" class="headerlink" title="关于歌词的同步方案实现"></a>关于歌词的同步方案实现</h2><p>目前音乐播放器的歌词同步显示大概有两种，一种是精确到单个文字，一种是精确到单行歌词。本文实现的是第二种。</p>
<h2 id="整体实现思路"><a href="#整体实现思路" class="headerlink" title="整体实现思路"></a>整体实现思路</h2><p>页面初始化时，请求歌曲数据json（本地json文件模拟），其中歌名、歌手、图片等按需渲染到html中，将歌词存储到localStorage中。此时，F12打开chrome调试器，进入Application-LocalStorage可以看到：<br><img src="http://huzerui.com/blog/img/post/2016-10-30-lyric-localstorage.jpg" alt="歌词本地存储"></p>
<p>点击一首歌进入播放页面后，歌词就会从本地存储中读取，此时你会看到生成这样的歌词结构：<br><img src="http://huzerui.com/blog/img/post/2016-10-30-lyric-html.jpg" alt="歌词结构"><br>每一行歌词都将要将歌词时间绑定在data-point上，监听歌曲播放的timeupdate事件，当歌曲的时间(经过取整处理)与当前data-point值相等时，就为当前歌词高亮（相当于给p添加current类名），并且根据当前高亮歌词的index索引将整个歌词盒子向上移动<strong>p标签的高度+margin-top的高度</strong>。</p>
<h3 id="lrc歌词的结构"><a href="#lrc歌词的结构" class="headerlink" title="lrc歌词的结构"></a>lrc歌词的结构</h3><p>来自网易云音乐的歌词数据：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[<span class="number">00</span>:<span class="number">14.64</span>]如果不是那镜子\n[<span class="number">00</span>:<span class="number">16.73</span>]不像你不藏秘密\n[<span class="number">00</span>:<span class="number">21.26</span>]我还不肯相信\n[<span class="number">00</span>:<span class="number">23.02</span>]没有你我的笑更美丽\n[<span class="number">00</span>:<span class="number">28.99</span>]那天听你在电话里略带抱歉的关心\n</div><div class="line"></div><div class="line">[<span class="number">00</span>:<span class="number">16.959</span>]摘一颗苹果\n[<span class="number">00</span>:<span class="number">19.800</span>]等你从门前经过\n[<span class="number">00</span>:<span class="number">22.700</span>]送到你的手中帮你解渴\n[<span class="number">00</span>:<span class="number">25.570</span>]像夏天的可乐\n</div><div class="line"></div><div class="line">[<span class="number">00</span>:<span class="number">00.00</span>] 作曲 : 周杰伦\n[<span class="number">00</span>:<span class="number">01.00</span>] 作词 : 周杰伦\n[<span class="number">00</span>:<span class="number">05.620</span>]\n[<span class="number">00</span>:<span class="number">37.980</span>]亲吻你的手\n</div></pre></td></tr></table></figure></p>
<p>可以看到<strong>格式 = [时间点] + 要显示的文字 + \n</strong><br>这里有两个坑需要注意：</p>
<ul>
<li>有的歌词秒数是精确到<strong>小数点后两位</strong>，<strong>有的是三位</strong>。</li>
<li>有的歌词（周杰伦《算什么男人》）格式是 <strong>[时间点]+\n</strong></li>
</ul>
<h3 id="时间歌词创建映射"><a href="#时间歌词创建映射" class="headerlink" title="时间歌词创建映射"></a>时间歌词创建映射</h3><p>首先以\n将歌词字符串分割成以<strong>[时间点]文字</strong>的数组，但由于这样分割之后最后一个元素是空的，所以用<strong>tempArr.splice(-1, 1)</strong>删除最后一个元素。</p>
<p>接下来循环遍历这个临时数组，由于上面提到的秒数精确度的问题，所以判断一下index为9是否为数字，若为数字则将该位数字删除。(采用字符串截取方式，若你对js字符串方法不熟悉，可以猛击<a href="http://huzerui.com/blog/2016/06/14/js-string-method/" target="_blank" rel="external">这里</a>)</p>
<p>经过这样的处理之后，临时数组的元素格式不再有区别了，此时再进行字符串截取，将截取到的时间点放入timeArr，将截取的歌词放入lyricArr，并以返回保存着这两个变量的对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArrMap</span>(<span class="params">lyric</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> timeArr = [],</div><div class="line">        lyricArr = [];</div><div class="line">    <span class="keyword">var</span> tempArr = lyric.split(<span class="string">"\n"</span>);</div><div class="line">    tempArr.splice(<span class="number">-1</span>, <span class="number">1</span>);</div><div class="line">    <span class="keyword">var</span> tempStr = <span class="string">""</span>;</div><div class="line">    $(tempArr).each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</div><div class="line">        tempStr = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">if</span> (tempStr.charAt(<span class="number">9</span>).match(<span class="regexp">/\d/</span>) !== <span class="literal">null</span>) &#123;</div><div class="line">            tempStr = tempStr.substring(<span class="number">0</span>, <span class="number">9</span>) + tempStr.substring(<span class="number">10</span>);</div><div class="line">        &#125;</div><div class="line">        timeArr.push(tempStr.substring(<span class="number">0</span>, <span class="number">10</span>));</div><div class="line">        lyricArr.push(tempStr.substring(<span class="number">10</span>));</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">timeArr</span>: timeArr,</div><div class="line">        <span class="attr">lyricArr</span>: lyricArr</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="生成歌词"><a href="#生成歌词" class="headerlink" title="生成歌词"></a>生成歌词</h3><p>由于上面歌词格式造成时间点对应的歌词为空，此时如果渲染出一个</p><p>标签的高度将为0，这会影响歌词向上移动距离的不统一。因此下面作出个判断如果为空，则替换为“————–”。（为空的时候大多数是歌曲中间停顿或过渡的时候）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderLyric</span>(<span class="params">songinfo</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arrMap = Util.createArrMap(songinfo.lyric);</div><div class="line">    <span class="keyword">var</span> tpl = <span class="string">""</span>;</div><div class="line">    $.each(arrMap.lyricArr, <span class="function"><span class="keyword">function</span>(<span class="params">index, lyric</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> lyricContent = lyric === <span class="string">""</span> ? <span class="string">"--------------"</span> : lyric;</div><div class="line">        tpl += <span class="string">"&lt;p class='' data-point='"</span> + arrMap.timeArr[index] + <span class="string">"'&gt;"</span> + lyricContent + <span class="string">"&lt;/p&gt;"</span>;</div><div class="line">    &#125;);</div><div class="line">    Dom.lrcwrap.html(tpl);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="歌词同步"><a href="#歌词同步" class="headerlink" title="歌词同步"></a>歌词同步</h3><p>歌词同步我写在了syncLyric方法中，监听audio元素的timeupdate事件调用。<br>这个方法接收两个参数，第一个是当前播放歌曲时间（秒），第二个是转化为秒数的时间点数组。<br>如果当前时间&gt;=时间点，那么高亮当前歌词（以lrcHighIndex）存储，并且lrcHighIndex自增1。<br>当歌词高亮索引lrcHighIndex&gt;=1即歌词高亮不为第一句时，计算索引并让歌词盒子向上移动。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncLyric</span>(<span class="params">curS, formatTimeArr</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">Math</span>.floor(curS) &gt;= formatTimeArr[lrcHighIndex]) &#123;</div><div class="line">        Dom.lrc.eq(lrcHighIndex).addClass(<span class="string">'current'</span>).siblings().removeClass(<span class="string">'current'</span>);</div><div class="line">        <span class="keyword">if</span> (lrcHighIndex &gt;= <span class="number">1</span>) &#123;</div><div class="line">            lrcMoveIndex = lrcHighIndex - <span class="number">2</span>;</div><div class="line">            moveDis += Util.getMoveDis(lrcMoveIndex);</div><div class="line">            Dom.lrcwrap.animate(&#123;</div><div class="line">                <span class="string">"top"</span>: <span class="string">"-"</span> + moveDis + <span class="string">"px"</span></div><div class="line">            &#125;, <span class="number">100</span>);</div><div class="line">            lrcMoveIndex++;</div><div class="line">        &#125;</div><div class="line">        lrcHighIndex++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“咳咳咳..在看正文之前，如果客官有兴趣可以轻点播放按钮聆听一下我的&lt;strong&gt;第一首吉他原创歌曲&lt;/strong&gt;”。——作于大三下学期&lt;/p&gt;
&lt;p&gt;&lt;audio style=&quot;width: 100%&quot; src=&quot;http://qiniu.huzerui.com/a
    
    </summary>
    
      <category term="前端" scheme="http://www.huzerui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html5" scheme="http://www.huzerui.com/tags/html5/"/>
    
      <category term="player" scheme="http://www.huzerui.com/tags/player/"/>
    
  </entry>
  
  <entry>
    <title>2016.10.3长沙之旅</title>
    <link href="http://www.huzerui.com/2016/10/03/traveling-of-changsha/"/>
    <id>http://www.huzerui.com/2016/10/03/traveling-of-changsha/</id>
    <published>2016-10-03T12:12:19.000Z</published>
    <updated>2017-04-29T07:02:21.907Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://huzerui.com/blog/img/post/2016-10-11-travel-of-changsha-1.jpg" alt="蓝瘦"><br><img src="http://huzerui.com/blog/img/post/2016-10-11-travel-of-changsha-2.jpg" alt="橘子洲夕阳"><br><img src="http://huzerui.com/blog/img/post/2016-10-11-travel-of-changsha-3.jpg" alt="极致美颜"><br><img src="http://huzerui.com/blog/img/post/2016-10-11-travel-of-changsha-4.jpg" alt="万达"><br><img src="http://huzerui.com/blog/img/post/2016-10-11-travel-of-changsha-5.jpg" alt="湖南大学"><br><img src="http://huzerui.com/blog/img/post/2016-10-11-travel-of-changsha-6.jpg" alt="湖南电视台"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://huzerui.com/blog/img/post/2016-10-11-travel-of-changsha-1.jpg&quot; alt=&quot;蓝瘦&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://huzerui.com/blog/img/post/2
    
    </summary>
    
      <category term="旅行" scheme="http://www.huzerui.com/categories/%E6%97%85%E8%A1%8C/"/>
    
    
      <category term="旅行" scheme="http://www.huzerui.com/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>毕业一年，如期而至</title>
    <link href="http://www.huzerui.com/2016/09/08/graduate-for-one-year/"/>
    <id>http://www.huzerui.com/2016/09/08/graduate-for-one-year/</id>
    <published>2016-09-08T14:51:47.000Z</published>
    <updated>2017-04-29T07:02:21.907Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://huzerui.com/blog/img/post/2016-09-08-graduration-poster.jpg" alt="poster"></p>
<iframe frameborder="0" style="max-width: 100%;max-height: 498px;" width="640" height="498" src="http://v.qq.com/iframe/player.html?vid=m03268wqppq&tiny=0&auto=0" allowfullscreen></iframe>

]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://huzerui.com/blog/img/post/2016-09-08-graduration-poster.jpg&quot; alt=&quot;poster&quot;&gt;&lt;/p&gt;
&lt;iframe frameborder=&quot;0&quot; style=&quot;max-width:
    
    </summary>
    
    
      <category term="大学" scheme="http://www.huzerui.com/tags/%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>移动端图片画廊</title>
    <link href="http://www.huzerui.com/2016/09/04/mobile-gallery/"/>
    <id>http://www.huzerui.com/2016/09/04/mobile-gallery/</id>
    <published>2016-09-04T02:55:47.000Z</published>
    <updated>2017-05-18T11:54:03.770Z</updated>
    
    <content type="html"><![CDATA[<p>移动端图片画廊，采用css3的flex布局结合object-fit属性，实现类似Google Photo 等高自适应的图片布局效果<br><img src="/blog/img/post/2016-09-04-mobile-photo-galleries.gif" alt="demo"><br>你也可以点击<a href="http://alex1504.oschina.io/demo/mobile-gallery/" target="_blank" rel="external">在线地址</a>  查看预览:</p>
<h2 id="关于flex-box布局"><a href="#关于flex-box布局" class="headerlink" title="关于flex-box布局"></a>关于flex-box布局</h2><p>flex布局简直是移动端的神器，因为移动端不存在兼容性问题，几乎所有手机浏览器都采用相同的标准。</p>
<h2 id="几分钟快速了解flex-box布局"><a href="#几分钟快速了解flex-box布局" class="headerlink" title="几分钟快速了解flex-box布局"></a>几分钟快速了解flex-box布局</h2><h3 id="采用flex布局（作用于容器）"><a href="#采用flex布局（作用于容器）" class="headerlink" title="采用flex布局（作用于容器）"></a>采用flex布局（作用于容器）</h3><p>块状元素：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">display</span>:flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>行内元素：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123; </div><div class="line">    <span class="attribute">display</span>: inline-flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h3><p>寻找好基友：<br> flex-direction、 flex-wrap、flex-flow<br>justify-content、align-items、align-content</p>
<p>解释：</p>
<ul>
<li><strong>flex-direction</strong>：决定主轴的方向（即项目的排列方向）</li>
<li><strong>flex-wrap</strong>：默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行</li>
<li><strong>strong text</strong>flex-flow：flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</li>
<li><strong>justify-content</strong>：定义了项目在主轴上的对齐方式（flex-start | flex-end | center | space-between | space-around）</li>
<li><strong>align-items</strong>：定义项目在交叉轴上如何对齐（flex-start | flex-end | center | baseline | stretch）</li>
<li><strong>align-content</strong>：定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。（flex-start | flex-end | center | space-between | space-around | stretch;）</li>
</ul>
<h3 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h3><p>基友：<br>flex-grow、flex-shrink、flex-basis、flex<br>order   （规整有序）<br>alignself  （特立独行）</p>
<p>解释：<br><strong>flex-grow</strong>：定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。<br><strong>flex-shrink</strong>：定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。<br><strong>flex-basis</strong>：定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。<br><strong>flex</strong>：flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p>
<p><strong>order</strong>：定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>
<p><strong>align-self</strong>：属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>
<h2 id="关于object-fit属性"><a href="#关于object-fit属性" class="headerlink" title="关于object-fit属性"></a>关于object-fit属性</h2><p>适用范围：替换元素</p>
<pre><code>&lt;img&gt;、&lt;input&gt;、&lt;textarea&gt;、&lt;select&gt;、&lt;object&gt;等
浏览器根据其标签的元素与属性来判断显示具体的内容
</code></pre><p>值：<br><strong>fill</strong>: 默认值。替换内容拉伸填满整个content box, 不保证保持原有的比例。<br><strong>contain</strong>: 保持原有尺寸比例。保证替换内容尺寸一定可以在容器里面放得下。因此，此参数可能会在容器内留下空白。<br><strong>cover</strong>: 保持原有尺寸比例。保证替换内容尺寸一定大于容器尺寸，宽度和高度至少有一个和容器一致。因此，此参数可能会让替换内容（如图片）部分区域不可见。<br><strong>none</strong>: 保持原有尺寸比例。同时保持替换内容原始尺寸大小。<br><strong>scale-down</strong>: 就好像依次设置了none或contain, 最终呈现的是尺寸比较小的那个。</p>
<h2 id="DEMO解释"><a href="#DEMO解释" class="headerlink" title="DEMO解释"></a>DEMO解释</h2><p>html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m-gallery"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- &lt;div&gt;&lt;img class="animated bounceIn" src="img/1.jpg"&gt;&lt;/div&gt; --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m-viewbox hide"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"bigimg animated bounceIn"</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>css:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">.m-gallery&#123;</div><div class="line">    display: flex; //采用flex布局</div><div class="line">    flex-wrap: wrap;  //规定一行放不下flex元素时自动换行</div><div class="line">&#125;</div><div class="line">.m-gallery div&#123;</div><div class="line">    height: 100px;</div><div class="line">    flex-grow:1;   //每个flex元素占的宽度相同</div><div class="line">    margin: 2px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.m-gallery  img&#123;</div><div class="line">    height: 100px;</div><div class="line">    min-width: 100%;     </div><div class="line">    max-width: 100%;</div><div class="line">    object-fit: cover;      //使图片等比拉伸，可能会被裁减</div><div class="line">    vertical-align: bottom;</div><div class="line">&#125;</div><div class="line">@media (max-width: 1000px) and (min-width: 900px) &#123;</div><div class="line">  .m-gallery::after &#123;</div><div class="line">      content: '';</div><div class="line">      flex-grow: 999999999;     //当最后一行图片太少的时候，比如只有一张，因为 grow 的关系，它将占满一整行，通过伪元素来占满剩余空间，防止图片拉伸</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">@media (max-width: 1100px) and (min-width: 1000px) &#123;</div><div class="line"> .m-gallery::after &#123;</div><div class="line">      content: '';</div><div class="line">      flex-grow: 999999999;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;移动端图片画廊，采用css3的flex布局结合object-fit属性，实现类似Google Photo 等高自适应的图片布局效果&lt;br&gt;&lt;img src=&quot;/blog/img/post/2016-09-04-mobile-photo-galleries.gif&quot; alt=
    
    </summary>
    
      <category term="前端" scheme="http://www.huzerui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="移动端" scheme="http://www.huzerui.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="图片画廊" scheme="http://www.huzerui.com/tags/%E5%9B%BE%E7%89%87%E7%94%BB%E5%BB%8A/"/>
    
  </entry>
  
  <entry>
    <title>CSS3变换及CSS3动画</title>
    <link href="http://www.huzerui.com/2016/06/16/css3-transform-animation/"/>
    <id>http://www.huzerui.com/2016/06/16/css3-transform-animation/</id>
    <published>2016-06-16T14:21:23.000Z</published>
    <updated>2017-04-29T07:02:21.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS3变换动画"><a href="#CSS3变换动画" class="headerlink" title="CSS3变换动画"></a>CSS3变换动画</h1><h2 id="指定三维视角"><a href="#指定三维视角" class="headerlink" title="指定三维视角"></a>指定三维视角</h2><p>perspective 属性定义 3D 元素距视图的距离，以像素计。<br>当为元素定义 perspective 属性时，其子元素会获得透视效果，而不是元素本身。</p>
<h2 id="三维变形"><a href="#三维变形" class="headerlink" title="三维变形"></a>三维变形</h2><p>三维变形的变形方式：四种方法<br>旋转——缩放——平移——扭曲——指定变形基点</p>
<h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p>transform:rotate(45deg);<br>该语句使div元素顺时针旋转45度。</p>
<h2 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h2><p>transform:scale(0.8,1);<br>使用缩放的方法实现文字或图像的缩放效果，在参数中指定缩放倍率。该语句使用scale方法使该元素在水平方向上缩小了20%，垂直方向上不缩放。</p>
<h2 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h2><p>translate(50px,50px);<br>使用translate方法来将文字或图像在水平方向和垂直方向上分别垂直移动50像素。</p>
<h2 id="扭曲"><a href="#扭曲" class="headerlink" title="扭曲"></a>扭曲</h2><p>transform:skew(30deg,0deg);<br>该实例通过skew方法把元素水平方向上倾斜30度，处置方向保持不变。</p>
<h2 id="指定变形基点"><a href="#指定变形基点" class="headerlink" title="指定变形基点"></a>指定变形基点</h2><p>在使用transform方法进行文字或图像的变形时，是以元素的中心点为基准点进行的。使用transform-orign属性，可以改变变形的基准点。<br>transorm-origin:left bottom;<br>left和bottom是基准点在元素水平方向和垂直方向上的位置。</p>
<h2 id="形成过渡动画"><a href="#形成过渡动画" class="headerlink" title="形成过渡动画"></a>形成过渡动画</h2><p>元素在定义了变化终点状态之后，在元素本身设置transition即可形成过渡动画。</p>
<h1 id="Animation动画"><a href="#Animation动画" class="headerlink" title="Animation动画"></a>Animation动画</h1><p>animation属性值：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>@keyframes</td>
<td style="text-align:center">定义动画名称</td>
</tr>
<tr>
<td>animation</td>
<td style="text-align:center">所有动画属性的简写属性，除了animation-play-state属性。</td>
</tr>
<tr>
<td>animation-name</td>
<td style="text-align:center">规定 @keyframes 动画的名称。</td>
</tr>
<tr>
<td>animation-duration</td>
<td style="text-align:center">规定动画完成一个周期所花费的时间。默认是0s。</td>
</tr>
<tr>
<td>animation-timing-function</td>
<td style="text-align:center">规定动画的速度曲线。默认是 “ease”。</td>
</tr>
<tr>
<td>animation</td>
<td style="text-align:center">规定动画何时开始。默认是0s。</td>
</tr>
<tr>
<td>animation-iteration-count</td>
<td style="text-align:center">规定动画被播放的次数。默认是1。</td>
</tr>
<tr>
<td>animation-direction</td>
<td style="text-align:center">规定动画是否在下一周期逆向地播放。默认是 “normal” 。逆向alternate</td>
</tr>
<tr>
<td>animation-play-state</td>
<td style="text-align:center">规定动画是否正在运行或暂停。默认是 “running”，暂停时pause</td>
</tr>
<tr>
<td>animation-fill-mode</td>
<td style="text-align:center">规定对象动画时间之外的状态。forwards：设置对象状态为动画结束时的状态；backwards：设置对象状态为动画开始时的状态；both：设置对象状态为动画开始或结束的状态</td>
</tr>
</tbody>
</table>
<h1 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h1><p>1、变换动画不能自行触发，通过hover等动作或结合JS进行触发。anmiation可以自行运行。<br>2、变换动画可控性较弱，只能指定起始状态和结束状态，而animation可以定义多个关键帧。<br>3、变换动画在运行结束之后，需要回到初始状态<br>4、变换动画的作用在于平滑的改变CSS样式<br>5、animation多两个参数，循环和动画的方式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS3变换动画&quot;&gt;&lt;a href=&quot;#CSS3变换动画&quot; class=&quot;headerlink&quot; title=&quot;CSS3变换动画&quot;&gt;&lt;/a&gt;CSS3变换动画&lt;/h1&gt;&lt;h2 id=&quot;指定三维视角&quot;&gt;&lt;a href=&quot;#指定三维视角&quot; class=&quot;headerli
    
    </summary>
    
      <category term="前端" scheme="http://www.huzerui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css3" scheme="http://www.huzerui.com/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>HTML5新增input类型</title>
    <link href="http://www.huzerui.com/2016/06/16/h5-tags/"/>
    <id>http://www.huzerui.com/2016/06/16/h5-tags/</id>
    <published>2016-06-16T13:50:32.000Z</published>
    <updated>2017-04-29T07:02:21.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML5表单新增input类型"><a href="#HTML5表单新增input类型" class="headerlink" title="HTML5表单新增input类型"></a>HTML5表单新增input类型</h1><p>在HTML4等早期版本中，input元素已经有了一些type类型，type可取的值有下面这些：<br>text文本类型：<code>&lt;input type=&quot;text&quot;/&gt;</code><br>password密码类型：<code>&lt;input type=&quot;password&quot;/&gt;</code><br>radio 单选类型：<code>&lt;input type=&quot;radio&quot;/&gt;</code>选项<br>checkbox 多选类型：<code>&lt;input type=&quot;checkbox&quot;/&gt;</code>选项<br>file 文件类型：<code>&lt;input type=&quot;file&quot;/&gt;</code><br>submit 提交按钮：<code>&lt;input type=&quot;submit&quot;value=&quot;提交&quot;/&gt;</code><br>reset重置按钮：<code>&lt;input type=&quot;reset&quot;value=重置&quot;/&gt;</code><br>button定义按钮：<code>&lt;input type=&quot;button&quot;value=&quot;按钮1&quot;/&gt;</code><br>image 定义图片按钮：<code>&lt;input type=&quot;image&quot;src=&quot;..&quot;/&gt;</code><br>hidden定义隐藏域：<code>&lt;input type=&quot;hidden&quot;/&gt;</code></p>
<p><strong>在HTML5中，input元素新增了一些类型，有email邮件类型、number数字类型、range数字滑动条、url地址类型、date日期类型及search搜索类型。下面我们来逐个介绍一下它们。</strong></p>
<h2 id="email邮件类型"><a href="#email邮件类型" class="headerlink" title="email邮件类型"></a>email邮件类型</h2><p>跟文本框类似，但它只接受符合email邮件格式的字符串，当表单提交时会自动检测，若不合法，则会给出提示。<br>html代码如下：</p>
<pre><code>&lt;input type=&quot;email&quot; name=&quot;&quot; value=&quot;&quot;&gt;
</code></pre><h2 id="number数字类型"><a href="#number数字类型" class="headerlink" title="number数字类型"></a>number数字类型</h2><p>跟文本框类似，它只接受数字类型的值，表单提交时会自动检测，若不合法，则会给出提示。<br>html代码如下：</p>
<pre><code>&lt;input type=&quot;number&quot; name=&quot;&quot; value=&quot;&quot;&gt;
</code></pre><h2 id="range数字滑动条"><a href="#range数字滑动条" class="headerlink" title="range数字滑动条"></a>range数字滑动条</h2><p>它展现出来是一个可以拖拉的滑动条，包含一定的数字范围，如：</p>
<pre><code>&lt;input type=&quot;range&quot; min=&quot;1&quot; max=&quot;10&quot;&gt;
</code></pre><p>当拖动滑动块时，它的value值会在1到10之间变化。</p>
<h2 id="url地址类型"><a href="#url地址类型" class="headerlink" title="url地址类型"></a>url地址类型</h2><p>跟文本框类似，它只接受网址类型的值，表单提交时会自动检测，若不合法，则会给出提示。<br>html代码如下：</p>
<pre><code>&lt;input type=&quot;url&quot;&gt;
</code></pre><h2 id="date日期类型"><a href="#date日期类型" class="headerlink" title="date日期类型"></a>date日期类型</h2><p>当此类表单成为焦点时，会自动弹出日历或者是调节按钮，但其样式会由于浏览器内核的不同而不同，此类型有一系列的只可选：<br>date：选取日、月、年<br>month：选取月、年<br>week：选取周、年<br>time：选取时间（小时和分钟）<br>datetime：选取时间、日、月、年，为UTC时间<br>datetime-local：选取时间、日、月、年，为本地时间<br>html代码如下：</p>
<pre><code>&lt;input type=&quot;date&quot;&gt;
</code></pre><p>其它的只需更改type值就可以了，就不一一列举了。</p>
<h2 id="search搜索类型"><a href="#search搜索类型" class="headerlink" title="search搜索类型"></a>search搜索类型</h2><p>跟文本框类似，它可以接受任意的值作为关键字，我们可以通过value获取这些关键字。<br>html代码如下：</p>
<pre><code>&lt;input type=&quot;search&quot;&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML5表单新增input类型&quot;&gt;&lt;a href=&quot;#HTML5表单新增input类型&quot; class=&quot;headerlink&quot; title=&quot;HTML5表单新增input类型&quot;&gt;&lt;/a&gt;HTML5表单新增input类型&lt;/h1&gt;&lt;p&gt;在HTML4等早期版本中，i
    
    </summary>
    
      <category term="前端" scheme="http://www.huzerui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html5" scheme="http://www.huzerui.com/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>移动端自适应布局解决方案——rem</title>
    <link href="http://www.huzerui.com/2016/06/16/mobile-rem/"/>
    <id>http://www.huzerui.com/2016/06/16/mobile-rem/</id>
    <published>2016-06-16T05:42:29.000Z</published>
    <updated>2017-04-29T07:02:21.907Z</updated>
    
    <content type="html"><![CDATA[<p>自适应布局方案有<strong>百分比布局、flex布局、弹性flex布局</strong>等，但是都有一些缺点。</p>
<ul>
<li><p>百分比布局缺点：字体大小需要另外一套自适应方法来调整；当屏幕宽度大于700px后，继续按照百分比元素会偏大，这个时候调整起来会比较麻烦。</p>
</li>
<li><p>flex布局、弹性flex布局：在移动端会出现一些支持的兼容问题。</p>
</li>
</ul>
<h1 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h1><p>W3C官网描述是“font size of the root element”，即rem是相对于根元素。<br>我们只需要在HTML根元素确定一个参考值，css中其他使用rem作为单位的值都基于这个值进行计算。</p>
<h1 id="rem实现宽度自适应的原理"><a href="#rem实现宽度自适应的原理" class="headerlink" title="rem实现宽度自适应的原理"></a>rem实现宽度自适应的原理</h1><p>通过JS使页面<html>的fontsize会根据屏幕的宽度自动调整。<br>具体是根据屏幕宽度和所设字体大小的比值是固定的，获取屏幕宽度后，按照固定比例缩小后作为rem的单位长度实现自适应。</html></p>
<p>另外值得说的是即使采用了rem布局方案，<strong>页面上不一定所有的元素都是采用rem作为单位。</strong>，比如下面淘宝的案例。底部固定的导航条采用的是高度使用固定的像素值，宽度flex布局的方案。<br><img src="http://huzerui.com/blog/img/post/2016-06-16-rem-adaptive-layout-1.jpg" alt="淘宝案例"><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">footer&#123;</div><div class="line">	height:114px;</div><div class="line">	</div><div class="line">	/*这三个样式需要补充prefix*/</div><div class="line">    /*通过一起使用box-align和box-pack属性,对div框的子元素进行居中*/</div><div class="line">	display:flex;</div><div class="line">	box-pack: justify;</div><div class="line">	box-align: center;</div><div class="line">    </div><div class="line">	justify-content: space-between; //在flex容器内的各项没有占用主轴所有可用的空间时,元素的各项周围留有空白</div><div class="line">	align-content: center;  //在flex容器内的各项没有占用纵轴上所有可用的空间时，元素居中对齐</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">doc, win</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> docEl = doc.documentElement,</div><div class="line">        resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</div><div class="line">        recalc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> clientWidth = docEl.clientWidth;</div><div class="line">            <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</div><div class="line">            <span class="keyword">if</span>(clientWidth&gt;=<span class="number">640</span>)&#123;</div><div class="line">                docEl.style.fontSize = <span class="string">'100px'</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                docEl.style.fontSize = <span class="number">100</span> * (clientWidth / <span class="number">640</span>) + <span class="string">'px'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</div><div class="line">    win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);</div><div class="line">    doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>);</div><div class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<p>代码解释：<br>如果页面的宽度超过了640px，那么页面中html的font-size恒为100px，否则，页面中html的font-size的大小为： 100 * (当前页面宽度 / 640) </p>
<h2 id="为什么是640px？"><a href="#为什么是640px？" class="headerlink" title="为什么是640px？"></a>为什么是640px？</h2><p>三个概念：屏幕分辨率、设备像素、css像素<br>屏幕分辨率和设备像素是物理概念，而CSS像素是WEB编程的概念；屏幕分辨率和设备像素的差别在于设备像素显示密度。<br>当设备屏幕分辨率=100%的时候，浏览器CSS像素尺寸和设备像素相等，而当像素密度(pixel density)为1的时候，屏幕分辨率和设备像素相等。</p>
<p>对于手机屏幕来说，640px的页面宽度是一个安全的最大宽度，保证了移动端页面两边不会留白。注意这里的px是css逻辑像素，与设备的物理像素是有区别的。如iPhone 5使用的是Retina视网膜屏幕，使用2px x 2px的 device pixel 代表 1px x 1px 的 css pixel，所以设备像素数为640 x 1136px，而它的CSS逻辑像素数为320 x 568px。</p>
<h2 id="为什么要设置html的font-size？"><a href="#为什么要设置html的font-size？" class="headerlink" title="为什么要设置html的font-size？"></a>为什么要设置html的font-size？</h2><p>rem就是根元素（即：html）的字体大小。html中的所有标签样式凡是涉及到尺寸的（如： height,width,padding,margin,font-size。甚至，left,top等）你都可以放心大胆的用rem作单位。<br>如果你把html的font-size设为20px，前面说过，rem就是html的字体大小，那么1rem = 20px。</p>
<p>浏览器一般都有最小字体限制，比如谷歌浏览器，最小中文字体就是12px，所以实际上没有办法让1rem=1px</p>
<p>根据上面的js代码，如果页面宽度低于640px,那么页面中html的font-size也会按照（当前页面宽度/640）的比例变化。这样，页面中凡是应用了rem的作尺寸单位的元素都会随着页面变化而等比例缩放了。</p>
<h2 id="怎么计算出不同分辨率下font-size的值？"><a href="#怎么计算出不同分辨率下font-size的值？" class="headerlink" title="怎么计算出不同分辨率下font-size的值？"></a>怎么计算出不同分辨率下font-size的值？</h2><p>假设页面设计稿是按照640的标准尺寸设计的，（当然这个尺寸肯定不一定是640，可以是320，或者480，又或是375）来看一组表格。<br><img src="http://huzerui.com/blog/img/post/2016-06-16-rem-adaptive-layout-2.jpg" alt="rem"></p>
<p>以640的宽度去切的，怎么计算不同宽度下font-site的值，大家看表格上面的数值变化应该能明白。举个例子：384/640 = 0.6，384是640的0.6倍，所以384页面宽度下的font-size也等于它的0.6倍，这时384的font-size就等于12px。在不同设备的宽度计算方式以此类推。</p>
<p>除了上面通过JS去动态计算根元素的font-size，也可采用媒体查询。一般我们在做web app都会先统计自己网站有哪些主流的屏幕设备，然后去针对那些设备去做media query设置也可以实现适配，例如下面这样(参考)：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>&#123;</div><div class="line">    <span class="attribute">font-size</span>:<span class="number">10px</span></div><div class="line">&#125; </div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">321px</span>) and (max-width:<span class="number">375px</span>)&#123;</div><div class="line">    <span class="selector-tag">html</span>&#123;</div><div class="line">        <span class="attribute">font-size</span>:<span class="number">11px</span></div><div class="line">    &#125;   </div><div class="line">&#125; </div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">376px</span>) and (max-width:<span class="number">414px</span>)&#123;</div><div class="line">    <span class="selector-tag">html</span>&#123;</div><div class="line">        <span class="attribute">font-size</span>:<span class="number">12px</span></div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">415px</span>) and (max-width:<span class="number">639px</span>)&#123;</div><div class="line">    <span class="selector-tag">html</span>&#123;</div><div class="line">        <span class="attribute">font-size</span>:<span class="number">15px</span></div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">640px</span>) and (max-width:<span class="number">719px</span>)&#123;</div><div class="line">    <span class="selector-tag">html</span>&#123;</div><div class="line">        <span class="attribute">font-size</span>:<span class="number">20px</span></div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">720px</span>) and (max-width:<span class="number">749px</span>)&#123;</div><div class="line">    <span class="selector-tag">html</span>&#123;</div><div class="line">        <span class="attribute">font-size</span>:<span class="number">22.5px</span></div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">750px</span>) and (max-width:<span class="number">799px</span>)&#123;</div><div class="line">    <span class="selector-tag">html</span>&#123;</div><div class="line">        <span class="attribute">font-size</span>:<span class="number">23.5px</span></div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">800px</span>)&#123;</div><div class="line">    <span class="selector-tag">html</span>&#123;</div><div class="line">        <span class="attribute">font-size</span>:<span class="number">25px</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用媒体查询的缺点是不能所有设备全适配，但是用JS是可以实现全适配。具体使用上根据需求来定。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自适应布局方案有&lt;strong&gt;百分比布局、flex布局、弹性flex布局&lt;/strong&gt;等，但是都有一些缺点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;百分比布局缺点：字体大小需要另外一套自适应方法来调整；当屏幕宽度大于700px后，继续按照百分比元素会偏大，这个时候调整起来会
    
    </summary>
    
    
      <category term="css" scheme="http://www.huzerui.com/tags/css/"/>
    
      <category term="webapp" scheme="http://www.huzerui.com/tags/webapp/"/>
    
      <category term="rem" scheme="http://www.huzerui.com/tags/rem/"/>
    
  </entry>
  
  <entry>
    <title>IcoMoon将图标转换成web字体</title>
    <link href="http://www.huzerui.com/2016/06/16/icoMoon/"/>
    <id>http://www.huzerui.com/2016/06/16/icoMoon/</id>
    <published>2016-06-16T03:22:52.000Z</published>
    <updated>2017-04-29T07:02:21.907Z</updated>
    
    <content type="html"><![CDATA[<p>本文总结一款免费开源的Web应用程序<a href="https://icomoon.io/app/#/select" target="_blank" rel="external">IcoMoon</a>制作web图标字体。</p>
<h1 id="使用web字体图标优势"><a href="#使用web字体图标优势" class="headerlink" title="使用web字体图标优势"></a>使用web字体图标优势</h1><p>适用性：一个图标字体比一系列的图像（特别是在Retina屏中使用双倍大小的图像）要小。一旦图标字体加载了，你的图标就会马上渲染出来，不需要下载一个图像。</p>
<p>可扩展性：图标字体可以用过font-size属性设置其任何大小。这使您能够随时输出不同大小的图标，然而，使用位图，你必须得为每个不同大小的图像输出一个不同文件。</p>
<p>灵活性：文字效果可以很容易地应用到你的图标上，包括<strong>颜色，阴影和翻转</strong>等效果。他们还可以在任何背景下显示。</p>
<p>兼容性：网页字体支持所有现代浏览器，包括IE低版本。详细兼容性可以点击这里。</p>
<h1 id="IconMoon优势"><a href="#IconMoon优势" class="headerlink" title="IconMoon优势"></a>IconMoon优势</h1><p>提供完整图标解决方案：<br>600+字符，您可以根据自己需求定制（如就选两个）；可以导入其他字体，也进行特别定制（类似fontforge功能）；定制字体提供打包导出功能（省去了字体转换），兼容IE6+，现代浏览器以及各类手机设备，且有demo实例，并对字符进行了HTML转化。</p>
<h1 id="IconMoon使用方法"><a href="#IconMoon使用方法" class="headerlink" title="IconMoon使用方法"></a>IconMoon使用方法</h1><p>导入或选择图标、对图标进行编辑、生成并输出成zip文件（含字体本身、HTML实例页面和相应的CSS）</p>
<h2 id="导入或选择图标"><a href="#导入或选择图标" class="headerlink" title="导入或选择图标"></a>导入或选择图标</h2><p>选择内置图标只需在界面单击相应图标，图标高亮即为选中。<br><img src="http://huzerui.com/blog/img/post/2016-06-16-how-to-use-iconmoon-1.jpg" alt="选择"><br>如果你通过AI做好了一个图标想导入，只需点击“Imorticons”按钮，然后选择您想要添加的SVG文件——您也可以一次添加多个文件。这些图标将会出现在“Your Custom Icons”区域中。如果他们是高亮的黄色显示，表示这些图标是你将要创建的图标字体。</p>
<h2 id="对图标进行编辑"><a href="#对图标进行编辑" class="headerlink" title="对图标进行编辑"></a>对图标进行编辑</h2><p><img src="http://huzerui.com/blog/img/post/2016-06-16-how-to-use-iconmoon-2.gif" alt="编辑"><br>如果你想调整图标的位置、大小或旋转，你可以点击“Edit”按钮。可以使用“Save Copy”按钮来创建图片的变化（例如，一个镜像的衅标）。添加一个有意义的图标标记，因为这将被用来生成类名。</p>
<h2 id="生成并输出成zip文件"><a href="#生成并输出成zip文件" class="headerlink" title="生成并输出成zip文件"></a>生成并输出成zip文件</h2><p>点击屏幕底部的“Font”按钮开始生成字体。这样你就可以指定哪个图标映射到哪个字符上，例如，如果你要设置一套六个旋转的球，你可以每 这六个球分别指定字符：q、w、e、r、t和y。你也可以根据你自己的爱好选择一个字体的名字。<br><img src="http://huzerui.com/blog/img/post/2016-06-16-how-to-use-iconmoon-3.jpg" alt="输出"><br>单击“Download”下载字体包到你的电脑上。他有一个字文件夹包含了字体本身（woff,eot,ttf格式），以及一个HTML示例页面和相应的CSS。甚至还有一个javascript文件和一个解决方法，如果你需要支持IE或IE7。</p>
<h1 id="如何使用这些图标字体"><a href="#如何使用这些图标字体" class="headerlink" title="如何使用这些图标字体"></a>如何使用这些图标字体</h1><p>@font-face引入字体库、调用图标字体</p>
<h2 id="font-face引入字体库"><a href="#font-face引入字体库" class="headerlink" title="@font-face引入字体库"></a>@font-face引入字体库</h2><p>语法：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@font-face &#123;</div><div class="line">   font-family: &lt;YourWebFontName&gt;;</div><div class="line">   src: &lt;source&gt; [&lt;format&gt;][,&lt;source&gt; [&lt;format&gt;]]*;</div><div class="line">   [font-weight: &lt;weight&gt;];</div><div class="line">   [font-style: &lt;style&gt;];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>兼容多种浏览器示例；如果只需兼容现代浏览器，可以按需删除src一些代码。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">font-face</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">'icomoon'</span>;</div><div class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'fonts/icomoon.eot?1h4iu7'</span>); <span class="comment">/* IE9 Compat Modes */</span></div><div class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'fonts/icomoon.eot?1h4iu7#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>),<span class="comment">/* IE6-IE8 */</span></div><div class="line">         <span class="built_in">url</span>(<span class="string">'fonts/icomoon.ttf?1h4iu7'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>), <span class="comment">/* Modern Browsers */</span></div><div class="line">         <span class="built_in">url</span>(<span class="string">'fonts/icomoon.woff?1h4iu7'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>), <span class="comment">/* Safari, Android, iOS */</span></div><div class="line">         <span class="built_in">url</span>(<span class="string">'fonts/icomoon.svg?1h4iu7#icomoon'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);  <span class="comment">/* Legacy iOS */</span></div><div class="line">    <span class="attribute">font-weight</span>: normal;</div><div class="line">    <span class="attribute">font-style</span>: normal;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="调用图标字体"><a href="#调用图标字体" class="headerlink" title="调用图标字体"></a>调用图标字体</h2><p>通过css属性选择器指定类为”icon-“开头的元素的font-family，并为icon-创建的图标类名定义content。与fontAwesome图标字体使用方法是相同的<br>css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[class^="icon-"]</span>, <span class="selector-attr">[class*=" icon-"]</span> &#123;</div><div class="line">    <span class="comment">/* 使用!important 使样式获得最高优先级  */</span></div><div class="line">    <span class="attribute">font-family</span>: <span class="string">'icomoon'</span> <span class="meta">!important</span>;</div><div class="line">    <span class="attribute">speak</span>: none;</div><div class="line">    <span class="attribute">font-style</span>: normal;</div><div class="line">    <span class="attribute">font-weight</span>: normal;</div><div class="line">    <span class="attribute">font-variant</span>: normal;</div><div class="line">    <span class="attribute">text-transform</span>: none;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* 使字体变得平滑 =========== */</span></div><div class="line">    <span class="attribute">-webkit-font-smoothing</span>: antialiased;</div><div class="line">    <span class="attribute">-moz-osx-font-smoothing</span>: grayscale;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.icon-home</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">"\e900"</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.icon-office</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">"\e904"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后html中定义类名调用即可：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-home"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>最简单的方法就是将文件夹中的style.css样式文件粘贴到自己项目中的样式表即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文总结一款免费开源的Web应用程序&lt;a href=&quot;https://icomoon.io/app/#/select&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IcoMoon&lt;/a&gt;制作web图标字体。&lt;/p&gt;
&lt;h1 id=&quot;使用web字体图标优势&quot;
    
    </summary>
    
      <category term="前端" scheme="http://www.huzerui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://www.huzerui.com/tags/css/"/>
    
      <category term="图标" scheme="http://www.huzerui.com/tags/%E5%9B%BE%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript获取DOM尺寸大小和元素位置</title>
    <link href="http://www.huzerui.com/2016/06/15/js-dom-elepos-and-elesize/"/>
    <id>http://www.huzerui.com/2016/06/15/js-dom-elepos-and-elesize/</id>
    <published>2016-06-15T04:46:43.000Z</published>
    <updated>2017-04-29T07:02:21.907Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript处理一些DOM元素的动态效果经常需要一些元素的尺寸大小和位置。body节点主要用于获取页面宽高和滚动条的滚动距离，以下出现body节点可以替换为其他DOM元素表示在该元素下获取或设置这些属性。作为HTML元素，都具有下列属性：<br><img src="http://huzerui.com/blog/img/post/2016-06-15-js-get-dom-position-and-size-1.jpg" alt="大小、位置属性"><br>这些属性的笼统特征：<br>client：元素内容+内边距 大小，不包括边框、外边距、滚动条部分<br>offset：元素内容+内边距+边框  不包括外边距和滚动条部分<br>scroll：与元素的滚动相关</p>
<h1 id="尺寸大小"><a href="#尺寸大小" class="headerlink" title="尺寸大小"></a>尺寸大小</h1><p>一张网页的全部面积，就是它的大小。通常情况下，网页的大小由内容和CSS样式表决定。<br>视口是指在浏览器窗口中看到的那部分网页面积。</p>
<h2 id="获取网页的大小（都不包括外边距、滚动条）"><a href="#获取网页的大小（都不包括外边距、滚动条）" class="headerlink" title="获取网页的大小（都不包括外边距、滚动条）"></a>获取网页的大小（都不包括外边距、滚动条）</h2><p><strong>宽（值随窗口大小发生改变）：</strong> document.body.clientWidth（不包括border，只包括内容+padding）<br>或者 document.body.offsetWidth（包括border）<br>或者 document.body.scrollWidth<br><strong>高(值固定)：</strong> document.body.clientHeigth（不包括border，只包括内容+padding）<br>或者 document.body.offsetHeight（包括border）<br>或者 document.body.scrollHeight<br><strong>说明：</strong>通常使用document.body.scrollWidth和document.body.scrollHeight</p>
<h2 id="获取屏幕相关属性"><a href="#获取屏幕相关属性" class="headerlink" title="获取屏幕相关属性"></a>获取屏幕相关属性</h2><p>使用window.screen对象的属性。这些属性有个特点，不会随着窗口的伸缩而改变数值<br><strong>屏幕分辨率的高：</strong>window.screen.height<br><strong>屏幕分辨率的宽：</strong>window.screen.width<br><strong>屏幕可用工作区高度：</strong>window.screen.availHeight<br><strong>屏幕可用工作区宽度：</strong>window.screen.availWidth=屏幕分辨率的宽</p>
<h2 id="获取视口大小"><a href="#获取视口大小" class="headerlink" title="获取视口大小"></a>获取视口大小</h2><p><strong>在声明了DOCTYPE的浏览器中：</strong><br>document.documentElement.clientWidth<br>document.documentElement.clientHeight<br>说明：IE，FF，Safari皆支持该方法，opera虽支持该属性，但是返回的是页面尺寸<br><strong>除了IE7及以下版本的所有浏览器都将此信息保存在window对象中</strong><br>window.innerWidth<br>window.innerHeight<br>说明：包含滚动条<br><strong>IE7及以下版本方获取视口方法</strong><br>document.body.offsetWidth<br>document.body.offsetHeight</p>
<h1 id="元素位置"><a href="#元素位置" class="headerlink" title="元素位置"></a>元素位置</h1><h2 id="绝对位置"><a href="#绝对位置" class="headerlink" title="绝对位置"></a>绝对位置</h2><p><strong>绝对位置：</strong>网页元素的绝对位置，指该元素的左上角相对于整张网页左上角的坐标。这个绝对位置要通过计算才能得到。<br><strong>获取绝对高度:</strong> DOMElement.offsetTop<br><strong>获取绝对宽度：</strong>DOMElement.offsetLeft</p>
<h2 id="相对位置"><a href="#相对位置" class="headerlink" title="相对位置"></a>相对位置</h2><p><strong>相对位置：</strong>网页元素的相对位置，指该元素左上角相对于浏览器窗口左上角的坐标。</p>
<p>由此有：元素绝对位置坐标=元素相对位置坐标+滚动条滚动的距离<br>要知道元素的相对位置就要知道滚动条滚动的距离，那么滚动条的滚动距离怎么获取呢？</p>
<h3 id="获取滚动条的滚动距离"><a href="#获取滚动条的滚动距离" class="headerlink" title="获取滚动条的滚动距离"></a>获取滚动条的滚动距离</h3><p><strong>竖：</strong>document.body.scrollTop       或window.scrollY<br><strong>横：</strong>document.body.scrollLeft      或window.scrollX</p>
<h3 id="窗口相对于屏幕的位置"><a href="#窗口相对于屏幕的位置" class="headerlink" title="窗口相对于屏幕的位置"></a>窗口相对于屏幕的位置</h3><p><strong>窗口相对于屏幕的X坐标：</strong>window.screenLeft（通常为0）<br><strong>窗口相对于屏幕的Y坐标：</strong>window.screenTop</p>
<h1 id="jQuery如何获取"><a href="#jQuery如何获取" class="headerlink" title="jQuery如何获取"></a>jQuery如何获取</h1><p>使用原生的js方法获取DOM尺寸大小和元素位置仍然不太方便，比如兼容性，jQuery封装的函数就很好的解决了这个问题。</p>
<h2 id="时下页面大小"><a href="#时下页面大小" class="headerlink" title="时下页面大小"></a>时下页面大小</h2><p>当窗口大小改变，宽度值改变，高度值固定<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).width()   <span class="comment">//浏览器时下窗口文档的宽度  </span></div><div class="line">$(<span class="built_in">document</span>).height()　<span class="comment">//浏览器时下窗口文档的高度</span></div></pre></td></tr></table></figure></p>
<h2 id="时下元素大小"><a href="#时下元素大小" class="headerlink" title="时下元素大小"></a>时下元素大小</h2><p>当窗口大小改变，宽度值改变，高度值固定<br>以下以body节点为例，可替换成DOM元素调用方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>.body).width()　　　　　　<span class="comment">//浏览器时下窗口文档body的宽度   </span></div><div class="line">$(<span class="built_in">document</span>.body).height()　　　　　 <span class="comment">//浏览器时下窗口文档body的高度   </span></div><div class="line">$(<span class="built_in">document</span>.body).outerWidth(<span class="literal">true</span>)　 <span class="comment">//浏览器时下窗口文档body的总宽度(包括padding、border) </span></div><div class="line">$(<span class="built_in">document</span>.body).outerHeight(<span class="literal">true</span>)　<span class="comment">//浏览器时下窗口文档body的总高度(包括padding、border)</span></div></pre></td></tr></table></figure></p>
<h2 id="时下可视区大小"><a href="#时下可视区大小" class="headerlink" title="时下可视区大小"></a>时下可视区大小</h2><p>当窗口大小改变，宽度、高度皆改变<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">window</span>).height() 　<span class="comment">//浏览器时下窗口可视区域高度    </span></div><div class="line">$(<span class="built_in">window</span>).width() 　 <span class="comment">//浏览器时下窗口可视区域宽度</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript处理一些DOM元素的动态效果经常需要一些元素的尺寸大小和位置。body节点主要用于获取页面宽高和滚动条的滚动距离，以下出现body节点可以替换为其他DOM元素表示在该元素下获取或设置这些属性。作为HTML元素，都具有下列属性：&lt;br&gt;&lt;img src=&quot;
    
    </summary>
    
    
      <category term="js" scheme="http://www.huzerui.com/tags/js/"/>
    
      <category term="dom" scheme="http://www.huzerui.com/tags/dom/"/>
    
  </entry>
  
  <entry>
    <title>javascript中的call()和apply()方法</title>
    <link href="http://www.huzerui.com/2016/06/15/js-call-and-apply/"/>
    <id>http://www.huzerui.com/2016/06/15/js-call-and-apply/</id>
    <published>2016-06-15T01:29:53.000Z</published>
    <updated>2017-04-29T07:02:21.907Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道函数调用有四种方式：<strong>直接调用、作为对象的方法调用、构造函数调用、间接调用</strong>。<br>而<strong>call()和apply()就是间接调用函数的方法</strong>。这两个方法都允许显示的指示调用上下文(this)的值，也就是说，任何函数可以作为任何对象的方法来调用，哪怕这个函数不是那个对象的方法。</p>
<p>假定有个函数f(),要想以对象o的方法来调用，可以这样使用call()和apply()<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f.call(o);</div><div class="line">f.apply(o);</div></pre></td></tr></table></figure></p>
<p>每行代码的功能类似于(假设对象o预先不存在名为m的属性)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">o.m=f;       <span class="comment">//将f存储为临时方法</span></div><div class="line">o.m();       <span class="comment">//调用</span></div><div class="line"><span class="keyword">delete</span> o.m;  <span class="comment">//删除临时方法</span></div></pre></td></tr></table></figure></p>
<h2 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h2><p>语法：<strong>call(thisObj, arg1, arg2 …argN)</strong><br>定义：<strong>调用一个对象的一个方法，以另一个对象替换当前对象</strong>。<br>说明：<br>1、call 方法可以用来代替另一个对象调用一个方法。<br>2、call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。<br>3、如果没有提供 thisObj 参数（或者传入null、undefined），那么 Global 对象被用作 thisObj；ES5严格模式则将默认为this的值。<br>4、arg1、arg2..是待传入调用函数的实参，以逗号分隔。</p>
<h2 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h2><p>语法：<strong>apply(thisObj,argArray)</strong><br>定义：<strong>应用某一对象的一个方法，用另一个对象替换当前对象</strong>。<br>说明：<br>1、如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。<br>2、如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数。<br>3、argArray是待传入调用函数的参数组成的数组</p>
<h3 id="关于apply-的奇淫巧计"><a href="#关于apply-的奇淫巧计" class="headerlink" title="关于apply()的奇淫巧计"></a>关于apply()的奇淫巧计</h3><h4 id="apply-用来求数组中最大元素"><a href="#apply-用来求数组中最大元素" class="headerlink" title="apply()用来求数组中最大元素"></a>apply()用来求数组中最大元素</h4><p>由于Math.max()只能传入逗号分隔的参数，而apply()的第二个参数恰好可以传入数组或类数组元素。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bigest=<span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, array_of_numbers)</div></pre></td></tr></table></figure></p>
<h4 id="Array-prototype-push-可以实现两个数组合并"><a href="#Array-prototype-push-可以实现两个数组合并" class="headerlink" title="Array.prototype.push 可以实现两个数组合并"></a>Array.prototype.push 可以实现两个数组合并</h4><p>push方法没有提供push一个数组,但是它提供了push(param1,param,…paramN) 所以同样也可以通过apply来使用数组作为参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">arr2=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1,arr2);</div></pre></td></tr></table></figure></p>
<h2 id="常用实例"><a href="#常用实例" class="headerlink" title="常用实例"></a>常用实例</h2><h3 id="将某个对象的方法临时借给另一个对象调用"><a href="#将某个对象的方法临时借给另一个对象调用" class="headerlink" title="将某个对象的方法临时借给另一个对象调用"></a>将某个对象的方法临时借给另一个对象调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;    </div><div class="line">    <span class="keyword">this</span>.name = <span class="string">"Animal"</span>;    </div><div class="line">    <span class="keyword">this</span>.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </div><div class="line">        alert(<span class="keyword">this</span>.name);    </div><div class="line">    &#125;    </div><div class="line">&#125;    </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>)</span>&#123;    </div><div class="line">    <span class="keyword">this</span>.name = <span class="string">"Cat"</span>;    </div><div class="line">&#125;    </div><div class="line"><span class="keyword">var</span> animal = <span class="keyword">new</span> Animal();    </div><div class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();    </div><div class="line"><span class="comment">//通过call或apply方法，将原本属于Animal对象的showName()方法交给对象cat来使用了。    </span></div><div class="line"><span class="comment">//输入结果为"Cat"    </span></div><div class="line">animal.showName.call(cat,<span class="string">","</span>);    </div><div class="line"><span class="comment">//animal.showName.apply(cat,[]);</span></div></pre></td></tr></table></figure>
<h3 id="实现继承"><a href="#实现继承" class="headerlink" title="实现继承"></a>实现继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>)</span>&#123;      </div><div class="line">    <span class="keyword">this</span>.name = name;      </div><div class="line">    <span class="keyword">this</span>.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;      </div><div class="line">        alert(<span class="keyword">this</span>.name);      </div><div class="line">    &#125;      </div><div class="line">&#125;      </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;    </div><div class="line">    Animal.call(<span class="keyword">this</span>, name);      <span class="comment">//将Anima函数临时作为this的方法进行调用，并且传入Cat方法的参数name</span></div><div class="line">&#125;           </div><div class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat(<span class="string">"Black Cat"</span>);   <span class="comment">//使用new调用Cat函数之后，this指向实例出来的对象cat；如果不使用new调用，则this指向全局对象。</span></div><div class="line">cat.showName();       <span class="comment">//"Black Cat"</span></div></pre></td></tr></table></figure>
<h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class1</span>(<span class="params"></span>)  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">this</span>.showSub = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)  </span></div><div class="line">    &#123;  </div><div class="line">        alert(a-b);  </div><div class="line">    &#125;  </div><div class="line">&#125;;   </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class2</span>(<span class="params"></span>)  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">this</span>.showAdd = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)  </span></div><div class="line">    &#123;  </div><div class="line">        alert(a+b);  </div><div class="line">    &#125;  </div><div class="line">&#125;;   </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class3</span>(<span class="params"></span>)  </span></div><div class="line">&#123;  </div><div class="line">    Class1.call(<span class="keyword">this</span>);  </div><div class="line">    Class2.call(<span class="keyword">this</span>);  </div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> Class3();   <span class="comment">//此时obj就多了showSub和showAdd的方法</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道函数调用有四种方式：&lt;strong&gt;直接调用、作为对象的方法调用、构造函数调用、间接调用&lt;/strong&gt;。&lt;br&gt;而&lt;strong&gt;call()和apply()就是间接调用函数的方法&lt;/strong&gt;。这两个方法都允许显示的指示调用上下文(this)的值，也就是说
    
    </summary>
    
      <category term="前端" scheme="http://www.huzerui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://www.huzerui.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>javascript字符串对象方法</title>
    <link href="http://www.huzerui.com/2016/06/14/js-string-method/"/>
    <id>http://www.huzerui.com/2016/06/14/js-string-method/</id>
    <published>2016-06-14T08:04:41.000Z</published>
    <updated>2017-04-29T07:02:21.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符方法"><a href="#字符方法" class="headerlink" title="字符方法"></a>字符方法</h1><h2 id="chatAt-和chatCodeAt"><a href="#chatAt-和chatCodeAt" class="headerlink" title="chatAt()和chatCodeAt"></a>chatAt()和chatCodeAt</h2><p>charAt()和charCodeAt()<br>这两个方法接收一个参数，即基于0的字符位置。<br>chatAt()以单字符字符串的形式返回给定位置的那个字符。<br>chatCodeAt()返回给定位置的那个字符的字符编码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stringValue=<span class="string">"hellow"</span>;</div><div class="line">stringValue.chatAt(<span class="number">1</span>);      <span class="comment">//"e"</span></div><div class="line">stringValue.chatCodeAt(<span class="number">1</span>);  <span class="comment">//"101"</span></div></pre></td></tr></table></figure></p>
<h1 id="字符串操作方法"><a href="#字符串操作方法" class="headerlink" title="字符串操作方法"></a>字符串操作方法</h1><h2 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h2><p>concat()用于将一个或多个字符串拼接起来，返回拼接得到的新创建的字符串。<br>但实践中大多数情况还是使用(+)加号操作符，比concat()简单易行。</p>
<h2 id="slice-、substring-、substr"><a href="#slice-、substring-、substr" class="headerlink" title="slice()、substring()、substr()"></a>slice()、substring()、substr()</h2><p>三个基于子字符串创建新字符串的方法，创建并返回被操作字符串的子字符串。<strong>注意方法名称都是小写</strong><br><strong>共同点：</strong><br>参数1：必选，指定子字符串开始位置。<br>参数2：可选，不指定时将字符串的长度作为结束位置。<br><strong>差异：</strong><br><strong>1、当指定参数2时</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th style="text-align:center">参数2含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>slice()、substring()</td>
<td style="text-align:center">指定子字符串最后一个字符的位置</td>
</tr>
<tr>
<td>substr</td>
<td style="text-align:center">返回或截取的字符个数</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stringValue=<span class="string">"hello world"</span>;</div><div class="line">stringValue.length;         <span class="comment">//11</span></div><div class="line">stringValue.slice(<span class="number">3</span>);       <span class="comment">//"lo world"</span></div><div class="line">stringValue.substring(<span class="number">3</span>);   <span class="comment">//"lo world"</span></div><div class="line">stringValue.substr(<span class="number">3</span>);		<span class="comment">//"lo world"</span></div><div class="line">stringValue.slice(<span class="number">3</span>,<span class="number">7</span>);		<span class="comment">//"lo wo"</span></div><div class="line">stringValue.substring(<span class="number">3</span>,<span class="number">7</span>); <span class="comment">//"lo wo"</span></div><div class="line">stringValue.substr(<span class="number">3</span>,<span class="number">7</span>);    <span class="comment">//"lo worl"</span></div></pre></td></tr></table></figure>
<p><strong>2、当传递这些方法的参数是负数时</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th style="text-align:center">行为</th>
</tr>
</thead>
<tbody>
<tr>
<td>slice()</td>
<td style="text-align:center">所有传入的负值与字符串的长度相加</td>
</tr>
<tr>
<td>substring()</td>
<td style="text-align:center">所有的负值参数都转化为0</td>
</tr>
<tr>
<td>substr()</td>
<td style="text-align:center">将负的第一个参数加上字符串的长度，将负的第二个参数转换为0</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stringValue=<span class="string">"hello world"</span>;</div><div class="line">stringValue.length;             <span class="comment">//11</span></div><div class="line">stringValue.slice(<span class="number">-3</span>);          <span class="comment">//"rld"</span></div><div class="line">stringValue.substring(<span class="number">-3</span>);      <span class="comment">//"hello world"</span></div><div class="line">stringValue.substr(<span class="number">-3</span>);			<span class="comment">//"rld"</span></div><div class="line">stringValue.slice(<span class="number">3</span>,<span class="number">-4</span>);		<span class="comment">//"lo wo"</span></div><div class="line">stringValue.substring(<span class="number">3</span>,<span class="number">-4</span>);    <span class="comment">//"hel"</span></div><div class="line">stringValue.substr(<span class="number">3</span>,<span class="number">-4</span>);       <span class="comment">//""</span></div></pre></td></tr></table></figure>
<h1 id="字符串位置方法"><a href="#字符串位置方法" class="headerlink" title="字符串位置方法"></a>字符串位置方法</h1><h2 id="indexOf-和lastIndexOf"><a href="#indexOf-和lastIndexOf" class="headerlink" title="indexOf()和lastIndexOf"></a>indexOf()和lastIndexOf</h2><p>从字符串中查找子字符串的位置，如果找到返回子字符串的位置；找不到返回-1<br>参数1：指定检索的子字符串<br>参数2：可选，指定开始检索的位置<br>indexOf()从开头向末尾搜索<br>lastIndexOf()从末尾向开头搜索<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">stringValue=<span class="string">"hello world"</span>;</div><div class="line">stringValue.indexOf(<span class="string">'o'</span>,<span class="number">6</span>);           <span class="comment">//7</span></div><div class="line">stringValue.lastIndexOf(<span class="string">'o'</span>,<span class="number">6</span>);       <span class="comment">//4,此时从指定位置向前检索</span></div></pre></td></tr></table></figure></p>
<h1 id="trim-方法"><a href="#trim-方法" class="headerlink" title="trim()方法"></a>trim()方法</h1><p>创建一个字符串的副本，删除前置及后缀的所有空格，然后返回结果。<br>注意：字符串中的空格不管<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">stringValue=<span class="string">" hellow world  "</span>;</div><div class="line">stringValue.trim();         <span class="comment">//"hellow world"</span></div><div class="line">stringValue;                <span class="comment">//" hellow world  ";</span></div></pre></td></tr></table></figure></p>
<h1 id="字符串大小写转换方法"><a href="#字符串大小写转换方法" class="headerlink" title="字符串大小写转换方法"></a>字符串大小写转换方法</h1><p>toLowerCase()和toUpperCase()</p>
<h1 id="字符串模式匹配方法"><a href="#字符串模式匹配方法" class="headerlink" title="字符串模式匹配方法"></a>字符串模式匹配方法</h1><h2 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h2><p>在字符串调用这个方法，本质上与调用RegExp对象的exec()方法相同。<br>参数：match()接收一个参数，要么是正则表达式，要么是正则对象。<br>返回值：matches返回一个数组，数组的第一项是与整个模式匹配的字符串，之后的每一项（如果有）保存着与正则表达式中捕获组匹配的字符串。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text=<span class="string">"cat,bat,hat"</span>;</div><div class="line"><span class="keyword">var</span> pattern=<span class="regexp">/.at/</span>;</div><div class="line"><span class="keyword">var</span> matches=text.match(pattern);</div><div class="line">matches.index              <span class="comment">//0</span></div><div class="line">matches[<span class="number">0</span>]                 <span class="comment">//"cat"</span></div><div class="line">pattern.lastIndex          <span class="comment">//0</span></div></pre></td></tr></table></figure></p>
<h2 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h2><p>参数：search()接收一个参数，要么是正则表达式，要么是正则对象。<br>返回值：返回字符串中第一个匹配项的索引，如果没有找到匹配项，则返回-1.<br>注意：search()方法始终从字符串开头向后查找模式<br>例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text=<span class="string">"cat,bat,hat"</span>;</div><div class="line"><span class="keyword">var</span> pos=text.search(<span class="regexp">/cat/</span>);    <span class="comment">//0</span></div></pre></td></tr></table></figure></p>
<h2 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h2><p>诞生原因：为了简化替换子字符串的操作，ECMAScript提供了replace()方法<br>参数：第一个参数正则对象或者字符串，第二个参数是一个字符串或者函数。<br>返回值：生成的替换后的字符串<br>注意<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">text=<span class="string">"cat,bat,hat"</span>;</div><div class="line">result=text.replace(<span class="string">"at"</span>,<span class="string">"ond"</span>)     <span class="comment">//"cond,bat,hat"</span></div><div class="line">result=text.replace(<span class="regexp">/at/g</span>,<span class="string">"ond"</span>)    <span class="comment">//"cond,cont,hont"</span></div></pre></td></tr></table></figure></p>
<p>更精细的替换操作，使用函数作为replace()的第二个参数<br>在只有一个匹配项的情况下，会向这个函数传递3个参数：模式的匹配项、模式的匹配项在字符串中的位置、原始字符串。<br>在正则表达式中定义了多个捕获组的情况下，这个函数的参数依次是：模式的匹配项、第一个捕获组的匹配项、第二个捕获组的匹配项…，最后两个参数是模式的匹配项在字符串中的位置、原始字符串。<br>这个函数应该返回一个字符串，表示准备替换的预备项。<br>例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlEscape</span>(<span class="params">text</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> text.replace(<span class="regexp">/[&lt;&gt;"&amp;]/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">match,pos,originText</span>)</span>&#123;</div><div class="line">		<span class="keyword">switch</span>(<span class="keyword">case</span>)&#123;</div><div class="line">			<span class="keyword">case</span> <span class="string">"&lt;"</span>:</div><div class="line">				<span class="keyword">return</span> &amp;lt;</div><div class="line">			<span class="keyword">case</span> <span class="string">"&gt;"</span>:</div><div class="line">				<span class="keyword">return</span> &amp;gt;</div><div class="line">			<span class="keyword">case</span> <span class="string">"\""</span>:</div><div class="line">				<span class="keyword">return</span> &amp;quot;</div><div class="line">			<span class="keyword">case</span> <span class="string">"&amp;"</span>:</div><div class="line">				<span class="keyword">return</span> &amp;amp;</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">&#125;</div><div class="line">htmlEscape(<span class="string">"&lt;p class=\"desc\"&gt;hellow&lt;/p&gt;"</span>)  </div><div class="line"><span class="comment">//输出 &amp;lt;p class=&amp;quot;desc;&amp;quot;&amp;gt;hellow&amp;lt;/p&amp;gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h2><p>基于指定的分割符将字符串分割成多个子字符串，并将结果存放在一个数组中。<br>参数：第一个参数是字符串或者正则表达式,匹配的项将作为分隔符<br>      第二个参数可选，用于指定数组的大小<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">color=<span class="string">"red,blue,pink"</span>;</div><div class="line">colors1=color.split(<span class="string">","</span>);   <span class="comment">//["red","blue","pink"]</span></div><div class="line">colors2=color.split(<span class="string">","</span>,<span class="number">2</span>); <span class="comment">//["red","blue"]</span></div><div class="line">colors3=color.split(<span class="regexp">/[^,]+/</span>);   </div><div class="line"><span class="comment">//["",",",",",""]   由于/^,/匹配的是除逗号以外的一个或多个字符，而"red"和"pink"刚好在开头和结尾，因此数组第一个元素和最后一个为空字符</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;字符方法&quot;&gt;&lt;a href=&quot;#字符方法&quot; class=&quot;headerlink&quot; title=&quot;字符方法&quot;&gt;&lt;/a&gt;字符方法&lt;/h1&gt;&lt;h2 id=&quot;chatAt-和chatCodeAt&quot;&gt;&lt;a href=&quot;#chatAt-和chatCodeAt&quot; class=&quot;
    
    </summary>
    
      <category term="前端" scheme="http://www.huzerui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://www.huzerui.com/tags/js/"/>
    
      <category term="string" scheme="http://www.huzerui.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>Javascript数组方法</title>
    <link href="http://www.huzerui.com/2016/06/14/js-array-method/"/>
    <id>http://www.huzerui.com/2016/06/14/js-array-method/</id>
    <published>2016-06-14T04:00:10.000Z</published>
    <updated>2017-04-29T07:02:21.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ECMAScript3定义的数组方法"><a href="#ECMAScript3定义的数组方法" class="headerlink" title="ECMAScript3定义的数组方法"></a>ECMAScript3定义的数组方法</h1><ul>
<li><strong>转换</strong>：join()</li>
<li><strong>排序</strong>: reverse()、sort()</li>
<li><strong>连接</strong>：concat()</li>
<li><strong>裁剪</strong>: slice()</li>
<li><strong>插入、删除</strong>：splice()、push()、pop()、unshift()、shift()</li>
<li><strong>对象方法</strong>：toString()、toLocaleString()</li>
</ul>
<h2 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h2><p>将数组中所有元素转化为字符串并连接在一起，返回最后生成的字符串。可以指定一个可选的字符串在生成的字符串中来分隔数组中的各个元素。<strong>如果不指定分隔符，默认使用逗号</strong>。</p>
<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h2><p>将数组中的元素顺序颠倒，返回逆序的数组。它<strong>不通过创建新的数组重新排列，而是在原先的数组中排列它们</strong>。</p>
<h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><p><strong>将数组中的元素排序并返回排序后的数组</strong>。当不带参数调用sort()时，数组元素以字母表顺序排序。<br>如果包含undefined的元素，它们会被排到数组的尾部。<br>如果要按照其他方式排序，必须给sort()方法传递一个比较函数，该函数的返回值决定了该函数所传入参数a,b在排序好的数组中的先后顺序。假设第一个参数在前，则应该返回一个小于0的数；相反，则返回一个大于0的数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//按数值升序</span></div><div class="line">a.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> a-b;</div><div class="line">&#125;)</div><div class="line"><span class="comment">//按数组降序</span></div><div class="line">a.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> b-a;</div><div class="line">&#125;)</div><div class="line"><span class="comment">//随机排序</span></div><div class="line">a.sort(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="number">0.5</span>-<span class="built_in">Math</span>.random();</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h2><p>Array.concat()方法<strong>创建并返回一个新的数组</strong>，元素包括调用concat()的原始数组的元素和concat()的每个参数。如果这些参数中的任何一个自身是数组，则连接的是数组的元素；但是，concat<br>()不会扁平化数组的数组，可以理解为<strong>只能解剖一层</strong>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">a.concat(<span class="number">4</span>,<span class="number">5</span>);            <span class="comment">//返回[1,2,3,4,5]</span></div><div class="line">a.concat([<span class="number">4</span>,<span class="number">5</span>]);		  <span class="comment">//返回[1,2,3,4,5]</span></div><div class="line">a.concat([<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>])     <span class="comment">//返回[1,2,3,4,5,6,7]</span></div><div class="line">a.concat(<span class="number">4</span>,[<span class="number">5</span>,[<span class="number">6</span>,<span class="number">7</span>]])     <span class="comment">//返回[1,2,3,4,5,[6,7]]</span></div></pre></td></tr></table></figure></p>
<p>由于返回的是新数组，该方法可用于<strong>实现数组复制</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> b=a.concat();</div><div class="line"><span class="built_in">console</span>.log(b)            <span class="comment">//返回[1,2,3]</span></div></pre></td></tr></table></figure></p>
<h2 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h2><p>Array.slice()方法<strong>创建并返回指定数组的子数组</strong>。<br>slice(start,end)  参数start为必须，end为可选，分别指定截取的数组的起、止位置；如果出现负数，它表示相对于数组最后一个元素的位置。<br>slice(start)   截取start开始到数组结束的所有元素<br>slice(start,end) 截取[start,end)闭开区间的数组元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];       </div><div class="line">a.slice(<span class="number">0</span>,<span class="number">3</span>);        <span class="comment">//返回[1,2,3]</span></div><div class="line">a.slice(<span class="number">3</span>);			 <span class="comment">//返回[4,5]</span></div><div class="line">a.slice(<span class="number">1</span>,<span class="number">-1</span>);	 	 <span class="comment">//返回[2,3,4]</span></div><div class="line">a.slice(<span class="number">-3</span>,<span class="number">-2</span>);		 <span class="comment">//返回[3]</span></div></pre></td></tr></table></figure></p>
<p>slice()方法可用于实现数组复制<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a.slice(<span class="number">0</span>);          <span class="comment">//返回[1,2,3,4,5]</span></div></pre></td></tr></table></figure></p>
<h2 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h2><p>Array.splice()是<strong>数组中插入或删除元素的通用方法</strong>。<strong>不同于concat()和slice()，splice()会修改调用的数组</strong><br>splice(index,howmany,item1,item2…)<br>第一个参数指定了插入或删除的<strong>起始位置</strong><br>第二个参数指定了应该从数组中<strong>删除的元素的个数</strong>，如果省略，从起始点开始到数组结尾的所有元素都将被删除<br>返回值：<strong>splice()返回一个由删除元素组成的数组，或者没有删除元素，就返回空数组</strong>。<br>删除：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">a.splice(<span class="number">3</span>);           <span class="comment">//返回[4,5],a是[1,2,3]</span></div><div class="line">a.splice(<span class="number">1</span>,<span class="number">2</span>);		   <span class="comment">//返回[2,3],a是[1]</span></div></pre></td></tr></table></figure></p>
<p>插入：注意区别于concat()，splice()会插入数组本身而非数组的元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">a.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">'a'</span>,<span class="string">'b'</span>)  <span class="comment">//返回[],a是[1,2,'a','b',3,4,5]</span></div><div class="line">a.splice(<span class="number">2</span>,<span class="number">2</span>,[<span class="number">1</span>,<span class="number">2</span>],<span class="number">3</span>)  <span class="comment">//返回[3,4],a是[1,2,[1,2],3,4,5]</span></div></pre></td></tr></table></figure></p>
<h2 id="push-、pop-、unshift-、shift"><a href="#push-、pop-、unshift-、shift" class="headerlink" title="push()、pop()、unshift()、shift()"></a>push()、pop()、unshift()、shift()</h2><p>在<strong>数组的尾部</strong>插入元素、删除元素：<br>push()、pop()<br>在<strong>数组的头部</strong>插入元素、删除元素：<br>unshift()、shift()<br><strong>这些方法都可以被splice()替代</strong>；</p>
<h2 id="toString-和toLocaleString"><a href="#toString-和toLocaleString" class="headerlink" title="toString()和toLocaleString()"></a>toString()和toLocaleString()</h2><p><strong>toString()方法将数组的每个元素转化为字符串，返回用逗号分隔的字符串列表</strong>。注意，输出不包括方括号或其他任何形式包裹数组数值的分隔符。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].toString();       <span class="comment">//返回'1,2,3'</span></div><div class="line">[<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>].toString(); <span class="comment">//返回'a,b,c'</span></div><div class="line">[<span class="number">1</span>,[<span class="number">2</span>,<span class="string">'c'</span>]].toString();   <span class="comment">//返回'1,2,c'</span></div></pre></td></tr></table></figure></p>
<p>这里与不使用任何参数调用join()方法返回的字符串是一样的。</p>
<p><strong>toLocaleString()是数组对象的本地字符串表示</strong>，返回结果随机器不同而不同，最好不要在脚本中用来基本运算。</p>
<h1 id="ECMAScript5中的数组方法"><a href="#ECMAScript5中的数组方法" class="headerlink" title="ECMAScript5中的数组方法"></a>ECMAScript5中的数组方法</h1><p>ECMAScript5中数组方法概述：<br>大多数方法<strong>第一个参数接收一个函数</strong>，<strong>并且对数组中的每个元素调用一次该函数</strong>。对不存在的元素不调用该函数。<br>大多数情况下，调用提供的函数使用三个参数：<strong>数组元素、元素的索引和数组本身</strong>，通常只需要使用第一个参数，忽略后面两个参数。<br>大多数ECMASscript数组方法第一个参数是一个函数，第二个参数可选。如果有第二个参数，则调用的函数被看成第二个参数的方法，即第二个参数可以在调用函数时将作为它的this关键字的值来使用，起到修改指针的作用。</p>
<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h2><p>array1.forEach(callbackfn[, thisArg])</p>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">定义</th>
</tr>
</thead>
<tbody>
<tr>
<td>array1</td>
<td style="text-align:center">必需。 一个数组对象。</td>
</tr>
<tr>
<td>callbackfn</td>
<td style="text-align:center">必需。 一个接受最多三个参数的函数。 对于数组中的每个元素，forEach 都会调用 callbackfn 函数一次。</td>
</tr>
<tr>
<td>thisArg可选</td>
<td style="text-align:center">可在 callbackfn 函数中为其引用 this 关键字的对象。 如果省略 thisArg，则 undefined 将用作 this 值。</td>
</tr>
</tbody>
</table>
<p>如果 callbackfn 参数不是函数对象，则将引发 TypeError 异常。</p>
<p>对于数组中的每个元素，forEach 方法都会调用 callbackfn 函数一次（采用升序索引顺序）。 不为数组中缺少的元素调用该回调函数。</p>
<p>除了数组对象之外，forEach 方法可由具有 length 属性且具有已按数字编制索引的属性名的任何对象使用。</p>
<h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><p>map()方法将调用数组的每个元素传递给指定的函数，并返回一个数组，它包含该函数的返回值。<br>map()方法返回的是新数组，<strong>它不修改调用的数组</strong>；如果是稀疏数组，返回的也是相同方式的稀疏数组。它具有相同的长度，相同的缺失元素。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">b=a.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x*x;          <span class="comment">//b是[1,4,9]    </span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><p>filter()方法创建并返回调用数组的一个子集。<strong>传递的函数用来进行逻辑判定</strong>的，该函数返回true或false。<br>返回true的元素将被添加成为这个子集的成员。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">b=a.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x&gt;<span class="number">3</span></div><div class="line">&#125;)                 <span class="comment">//b是[4,5]</span></div><div class="line">c=a.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x,i</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> i%<span class="number">2</span>==<span class="number">0</span>；</div><div class="line">&#125;)                 <span class="comment">//c是[1,3,5]</span></div></pre></td></tr></table></figure></p>
<h2 id="every-和some-方法"><a href="#every-和some-方法" class="headerlink" title="every()和some()方法"></a>every()和some()方法</h2><p>所有：every()每个数组元素回调函数都返回true的时候才会返回true，当遇到false的时候终止执行，返回false；<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line">a.every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x &lt; <span class="number">10</span>;      <span class="comment">//返回true</span></div><div class="line">&#125;);</div><div class="line">a.every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">0</span>;  <span class="comment">//返回false,并非所有元素都能被2整除   </span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>存在：some()<br>存在有一个数组元素的回调函数返回true的时候终止执行并返回true，否则返回false。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line">a.some(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">0</span>;  <span class="comment">//返回true </span></div><div class="line">&#125;);</div><div class="line">a.some(<span class="built_in">isNaN</span>);    <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<h2 id="reduce-和reduceRight-方法"><a href="#reduce-和reduceRight-方法" class="headerlink" title="reduce()和reduceRight()方法"></a>reduce()和reduceRight()方法</h2><p>遍历数组，调用回调函数，将数组元素组合成一个值<br>参数1：回调函数：把两个值合为一个<br>参数2：value，一个初始值，可选<br>reduce从索引最小值开始<br>reduceRight反向，方法有两个参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</div><div class="line"><span class="built_in">console</span>.log(a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">v1,v2</span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> v1+v2;</div><div class="line">&#125;));              <span class="comment">// 21</span></div><div class="line"><span class="built_in">console</span>.log(a.reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">v1,v2</span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> v1-v2;</div><div class="line">&#125;,<span class="number">100</span>));          <span class="comment">// 79</span></div></pre></td></tr></table></figure></p>
<h2 id="indexOf-lastIndexOf-方法"><a href="#indexOf-lastIndexOf-方法" class="headerlink" title="indexOf()lastIndexOf()方法"></a>indexOf()lastIndexOf()方法</h2><p>用于查找数组内指定元素位置，查找到第一个后返回其索引，没有查找到返回-1，indexOf从头至尾搜索，lastIndexOf反向搜索。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>);</div><div class="line"><span class="built_in">console</span>.log(a.indexOf(<span class="number">2</span>));     <span class="comment">//1</span></div><div class="line"><span class="built_in">console</span>.log(a.lastIndexOf(<span class="number">2</span>)); <span class="comment">//4</span></div><div class="line"><span class="built_in">console</span>.log(a.IndexOf(<span class="number">4</span>));     <span class="comment">//-1，找不到</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ECMAScript3定义的数组方法&quot;&gt;&lt;a href=&quot;#ECMAScript3定义的数组方法&quot; class=&quot;headerlink&quot; title=&quot;ECMAScript3定义的数组方法&quot;&gt;&lt;/a&gt;ECMAScript3定义的数组方法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.huzerui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://www.huzerui.com/tags/js/"/>
    
      <category term="数组" scheme="http://www.huzerui.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>使用jQuery封装插件</title>
    <link href="http://www.huzerui.com/2016/06/12/jquery-plugin/"/>
    <id>http://www.huzerui.com/2016/06/12/jquery-plugin/</id>
    <published>2016-06-12T10:10:19.000Z</published>
    <updated>2017-04-29T07:02:21.907Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery封装插件的方法有三种：封装对象方法的插件、封装全局函数的插件、选择器插件</p>
<h1 id="对象方法的插件"><a href="#对象方法的插件" class="headerlink" title="对象方法的插件"></a>对象方法的插件</h1><p>这种插件是将对象方法封装起来，用于对通过选择器获取的jQuery对象进行操作，是最常见的一种插件。此类插件可以发挥出jQuery选择器的强大优势，有相当一部分的jQuery的方法，都是在jQuery脚本库内部通过这种形式“插”在内核上的，例如parent()方法，appendTo()方法等。</p>
<h2 id="添加一个对象扩展方法"><a href="#添加一个对象扩展方法" class="headerlink" title="添加一个对象扩展方法"></a>添加一个对象扩展方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> $.fn.changeColor= <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.css( <span class="string">"color"</span>, <span class="string">"red"</span> );</div><div class="line">&#125;;</div><div class="line">   $.fn.changeFont= <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.css( <span class="string">"font-size"</span>, <span class="string">"24px"</span> );</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="添加多个对象扩展方法"><a href="#添加多个对象扩展方法" class="headerlink" title="添加多个对象扩展方法"></a>添加多个对象扩展方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">   $.fn.changeColor= <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.css( <span class="string">"color"</span>, <span class="string">"red"</span> );</div><div class="line">&#125;;</div><div class="line">   $.fn.changeFont=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.css( <span class="string">"font-size"</span>, <span class="string">"24px"</span> );</div><div class="line">&#125;;</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>
<h2 id="使用-fn-extend-obj-方法"><a href="#使用-fn-extend-obj-方法" class="headerlink" title="使用$.fn.extend(obj)方法"></a>使用$.fn.extend(obj)方法</h2><p>插件中不需要默认参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">    $.fn.extend(&#123;</div><div class="line">        <span class="string">"pluginName"</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="comment">//这里放置插件代码</span></div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>
<p>插件中需要设置一些默认参数，可以使用\$.extend()进行扩展。在后面将对\$.fn.extend()和$.extend()进行详解<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">    $.fn.extend(&#123;</div><div class="line">        <span class="string">"pluginName"</span>:<span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</div><div class="line">            options=$.extend(&#123;</div><div class="line">                <span class="comment">//放置默认参数</span></div><div class="line">            &#125;,options);</div><div class="line">            <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="comment">//这里放置插件代码</span></div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>
<h1 id="全局函数的插件"><a href="#全局函数的插件" class="headerlink" title="全局函数的插件"></a>全局函数的插件</h1><p>可以将独立的函数加到jQuery命名空间下。如常用的jQuery.ajax()方去首尾空格的jQuery.trim()方法，都是jQuery内部作为全局函数的插件附加到内核上去的。 </p>
<h2 id="添加单个全局函数"><a href="#添加单个全局函数" class="headerlink" title="添加单个全局函数"></a>添加单个全局函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.ltrim = <span class="function"><span class="keyword">function</span>(<span class="params"> str </span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> str.replace( <span class="regexp">/^\s+/</span>, <span class="string">""</span> );</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="添加多个全局函数"><a href="#添加多个全局函数" class="headerlink" title="添加多个全局函数"></a>添加多个全局函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.ltrim = <span class="function"><span class="keyword">function</span>(<span class="params"> str </span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> str.replace( <span class="regexp">/^\s+/</span>, <span class="string">""</span> );</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">$.rtrim = <span class="function"><span class="keyword">function</span>(<span class="params"> str </span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> str.replace( <span class="regexp">/\s+$/</span>, <span class="string">""</span> );</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="使用-extend-进行扩展-适合全局函数比较多的情况"><a href="#使用-extend-进行扩展-适合全局函数比较多的情况" class="headerlink" title="使用$.extend()进行扩展(适合全局函数比较多的情况)"></a>使用$.extend()进行扩展(适合全局函数比较多的情况)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$.extend(&#123;</div><div class="line">  <span class="attr">ltrim</span>:<span class="function"><span class="keyword">function</span>(<span class="params"> str </span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> str.replace( <span class="regexp">/^\s+/</span>, <span class="string">""</span> );</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">rtrim</span>:<span class="function"><span class="keyword">function</span>(<span class="params"> str </span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> str.replace( <span class="regexp">/\s+$/</span>, <span class="string">""</span> );</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="独立的命名空间"><a href="#独立的命名空间" class="headerlink" title="独立的命名空间"></a>独立的命名空间</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$.myPlugin=&#123;</div><div class="line">   <span class="attr">ltrim</span>:<span class="function"><span class="keyword">function</span>(<span class="params"> str </span>) </span>&#123;</div><div class="line">       <span class="keyword">return</span> str.replace( <span class="regexp">/^\s+/</span>, <span class="string">""</span> );</div><div class="line">   &#125;,</div><div class="line">   <span class="attr">rtrim</span>:<span class="function"><span class="keyword">function</span>(<span class="params"> str </span>) </span>&#123;</div><div class="line">       <span class="keyword">return</span> str.replace( <span class="regexp">/\s+$/</span>, <span class="string">""</span> );</div><div class="line">   &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="选择器插件"><a href="#选择器插件" class="headerlink" title="选择器插件"></a>选择器插件</h1><p>虽然jQuery的选择器十分强大，但在少数情况下，还是会需要用到选择器插件来扩充一些自己喜欢的选择器。 </p>
<h2 id="编写jQuery选择器需要知道jQuery选择器的参数。"><a href="#编写jQuery选择器需要知道jQuery选择器的参数。" class="headerlink" title="编写jQuery选择器需要知道jQuery选择器的参数。"></a>编写jQuery选择器需要知道jQuery选择器的参数。</h2><p>jQuery选择器函数一共接收3个参数，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">a,i,m</span>)</span>&#123;</div><div class="line">    <span class="comment">//第一个参数为a，指向当前遍历的DOM元素</span></div><div class="line">    <span class="comment">//第二个参数为i，指的是当前遍历DOM元素的索引，从0开始</span></div><div class="line">    <span class="comment">//第三个参数m比较特别，它是有jQuery正则引擎进一步解析后的产物（用match匹配出来的），结果是一个数组</span></div><div class="line">        <span class="comment">//m[0]，以例子$("div:gt(1)")来讲，是:gt(1)这部分</span></div><div class="line">        <span class="comment">//m[1]，选择器的引导符，匹配例子中的:号</span></div><div class="line">        <span class="comment">//m[2]，例子中的gt，确定是调用哪个选择器函数</span></div><div class="line">        <span class="comment">//m[3]，括号里的数字1，是编写选择器函数最重要的参数</span></div><div class="line">        <span class="comment">//m[4]，例子没有体现，略</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="构建选择器函数"><a href="#构建选择器函数" class="headerlink" title="构建选择器函数"></a>构建选择器函数</h2><p>例如编写$(“div:between(2,5)”)能实现获取索引值为3,4元素的功能<br>构建：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">a,i,m</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> tmp=m[<span class="number">3</span>].split(<span class="string">","</span>);   <span class="comment">//将传进来的m[3]以逗号分隔开，转成一个数组</span></div><div class="line">    <span class="keyword">return</span> tmp[<span class="number">0</span>]<span class="number">-0</span>&lt;i&amp;&amp;i&lt;tmp[<span class="number">1</span>]<span class="number">-0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>扩展成jQuery选择器<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $.extend($.expr[<span class="string">":"</span>],&#123;</div><div class="line">        <span class="attr">between</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> tmp=m[<span class="number">3</span>].split(<span class="string">","</span>);  </div><div class="line">            <span class="keyword">return</span> tmp[<span class="number">0</span>]<span class="number">-0</span>&lt;i&amp;&amp;i&lt;tmp[<span class="number">1</span>]<span class="number">-0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;)(jQuery)</div></pre></td></tr></table></figure></p>
<h1 id="插件的基本要点"><a href="#插件的基本要点" class="headerlink" title="插件的基本要点"></a>插件的基本要点</h1><ul>
<li>Query插件的文件名推荐命名为jquery.[插件名].js，以免和其他JS库插件混淆。 </li>
<li>所有的对象方法都应当附加到jQuery.fn对象上，而所有的全局函数都应当附加到jQuery对象本身。 </li>
<li><p><strong>在插件的范围里， this关键字代表了这个插件将要执行的jQuery对象；而在其他包含callback的jQuery函数中，this关键字代表了原生的DOM元素</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">    $.fn.m​​yPlugin =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="comment">//此处没有必要将this包在$号中如$(this)，因为this已经是一个jQuery对象。</span></div><div class="line"><span class="comment">//$(this)等同于 $($('#element'));</span></div><div class="line">        <span class="keyword">this</span>.fadeIn(<span class="string">'normal'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="comment">//此处callback函数中this关键字代表一个DOM元素</span></div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line">&#125;)(jQuery);</div><div class="line"> </div><div class="line">$(<span class="string">'#element'</span>).myPlugin();</div></pre></td></tr></table></figure>
</li>
<li><p>可以通过this.each方法来遍历所有元素。</p>
</li>
<li>在插件头部加上一个分号，以免他人的不规范代码给插件带来影响。 </li>
<li>所有的方法或函数插件，都应当以分号结尾，以免压缩时出现问题 </li>
<li>除非插件需要返回的是一些需要获取的变量，<strong>插件应该返回一个jQuery对象</strong>，以保证插件的可链式操作。 </li>
<li>利于jQuery.extend()方法设置插件方法的默认参数，增加插件的可用性。 </li>
</ul>
<h1 id="jQuery-fn-extend-与jQuery-extend-的对比"><a href="#jQuery-fn-extend-与jQuery-extend-的对比" class="headerlink" title="jQuery.fn.extend()与jQuery.extend()的对比"></a>jQuery.fn.extend()与jQuery.extend()的对比</h1><ul>
<li>jQuery.fn.extend()是对于jQuery对象（原型）扩展的方法，因为jQuery.fn=jQuery.prototype</li>
<li>jQuery.extend()除了用于扩展jQuery全局函数和选择器函数之外，还有一个重要的功能，就是扩展已有的Objext对象<br><strong>语法：jQuery.extend(target,obj1,…[objN])</strong></li>
</ul>
<p>1、例如合并setting对象和options对象，修改并返回settings对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> setting=&#123;<span class="attr">validate</span>:<span class="literal">false</span>,<span class="attr">limit</span>:<span class="number">5</span>,<span class="attr">name</span>:<span class="string">"foo"</span>&#125;</div><div class="line"><span class="keyword">var</span> options=&#123;<span class="attr">validate</span>:<span class="literal">true</span>,<span class="attr">name</span>:<span class="string">"bar"</span>&#125;</div><div class="line"><span class="keyword">var</span> newOptions=jQuery.extend(setting,options)</div><div class="line"><span class="comment">//结果</span></div><div class="line">newOptions=&#123;<span class="attr">validate</span>:<span class="literal">true</span>,<span class="attr">limit</span>:<span class="number">5</span>,<span class="attr">name</span>:<span class="string">"bar"</span>&#125;</div></pre></td></tr></table></figure></p>
<p>由此可见，内部机制是有扩展对象将覆盖与原对象相同的属性的值；若原对象不存在某属性，则进行扩展<br>2、jQuery.extend()常被用于设置插件方法的一系列默认参数，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">options</span>)</span>&#123;</div><div class="line">    options=jQuery.extend(&#123;</div><div class="line">        <span class="attr">name</span>:<span class="string">"bar"</span>,</div><div class="line">        <span class="attr">length</span>:<span class="number">5</span>,</div><div class="line">        <span class="attr">dataType</span>:<span class="string">"xml"</span>       <span class="comment">/*默认参数*/</span></div><div class="line">    &#125;,options)               <span class="comment">/*options为传递的参数*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jQuery封装插件的方法有三种：封装对象方法的插件、封装全局函数的插件、选择器插件&lt;/p&gt;
&lt;h1 id=&quot;对象方法的插件&quot;&gt;&lt;a href=&quot;#对象方法的插件&quot; class=&quot;headerlink&quot; title=&quot;对象方法的插件&quot;&gt;&lt;/a&gt;对象方法的插件&lt;/h1&gt;&lt;p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.huzerui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://www.huzerui.com/tags/js/"/>
    
      <category term="jQuery" scheme="http://www.huzerui.com/tags/jQuery/"/>
    
  </entry>
  
</feed>
